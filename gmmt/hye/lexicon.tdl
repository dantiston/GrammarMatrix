;;; -*- Mode: TDL; Package: LKB -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; NOUNS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; cat
katu := common-noun-lex &
  [ STEM < "katu" >,
    SYNSEM.LKEYS.KEYREL.PRED '_cat_n_rel ].

; food
utelikh := common-noun-lex &
  [ STEM < "utelikh" >,
    SYNSEM.LKEYS.KEYREL.PRED '_food_n_rel ].

; boy
manchh := common-noun-lex &
  [ STEM < "manchh" >,
    SYNSEM.LKEYS.KEYREL.PRED '_boy_n_rel ].

; child
manuk := common-noun-lex &
  [ STEM < "manuk" >,
    SYNSEM.LKEYS.KEYREL.PRED '_child_n_rel ].

; girl
aghjik := common-noun-lex &
  [ STEM < "aghjik" >,
    SYNSEM.LKEYS.KEYREL.PRED '_girl_n_rel ].

; man
mard := common-noun-lex &
  [ STEM < "mard" >,
    SYNSEM.LKEYS.KEYREL.PRED '_man_n_rel ].

; person
andz := common-noun-lex &
  [ STEM < "andz" >,
    SYNSEM.LKEYS.KEYREL.PRED '_person_n_rel ].

; woman
kin := common-noun-lex &
  [ STEM < "kin" >,
    SYNSEM.LKEYS.KEYREL.PRED '_woman_n_rel ].

; cow
kovu := common-noun-lex &
  [ STEM < "kov" >,
    SYNSEM.LKEYS.KEYREL.PRED '_cow_n_rel ].

; dog
shun := common-noun-lex &
  [ STEM < "shun" >,
    SYNSEM.LKEYS.KEYREL.PRED '_dog_n_rel ].

; frog
gort := common-noun-lex &
  [ STEM < "gort" >,
    SYNSEM.LKEYS.KEYREL.PRED '_frog_n_rel ].

; horse
dzi := common-noun-lex &
  [ STEM < "dzi" >,
    SYNSEM.LKEYS.KEYREL.PRED '_horse_n_rel ].

; sheep
vochhxar := common-noun-lex &
  [ STEM < "vochhxar" >,
    SYNSEM.LKEYS.KEYREL.PRED '_sheep_n_rel ].

; apple
xendzor := common-noun-lex &
  [ STEM < "xendzor" >,
    SYNSEM.LKEYS.KEYREL.PRED '_apple_n_rel ].

; bread
hatsh := common-noun-lex &
  [ STEM < "hatsh" >,
    SYNSEM.LKEYS.KEYREL.PRED '_bread_n_rel ].

; coffee
surch := common-noun-lex &
  [ STEM < "surch" >,
    SYNSEM.LKEYS.KEYREL.PRED '_surch_n_rel ].

; milk
kath := common-noun-lex &
  [ STEM < "kath" >,
    SYNSEM.LKEYS.KEYREL.PRED '_milk_n_rel ].

; tea
tey := common-noun-lex &
  [ STEM < "tey" >,
    SYNSEM.LKEYS.KEYREL.PRED '_tea_n_rel ].

; book
girkh := common-noun-lex &
  [ STEM < "girkh" >,
    SYNSEM.LKEYS.KEYREL.PRED '_book_n_rel ].

; car
inkhnasharzh := common-noun-lex &
  [ STEM < "inkhnasharzh" >,
    SYNSEM.LKEYS.KEYREL.PRED '_car_n_rel ].

; money
dram := common-noun-lex &
  [ STEM < "dram" >,
    SYNSEM.LKEYS.KEYREL.PRED '_money_n_rel ].

; pencil
matit := common-noun-lex &
  [ STEM < "matit" >,
    SYNSEM.LKEYS.KEYREL.PRED '_pencil_n_rel ].

; television
heratesil := common-noun-lex &
  [ STEM < "heratesil" >,
    SYNSEM.LKEYS.KEYREL.PRED '_television_n_rel ].

; tree
tsarr := common-noun-lex &
  [ STEM < "tsarr" >,
    SYNSEM.LKEYS.KEYREL.PRED '_tree_n_rel ].

; glass
apaki := common-noun-lex &
  [ STEM < "apaki" >,
    SYNSEM.LKEYS.KEYREL.PRED '_glass_n_rel ].

; spoon
dgal := common-noun-lex &
  [ STEM < "dgal" >,
    SYNSEM.LKEYS.KEYREL.PRED '_spoon_n_rel ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; PRONOUNS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; I

es_nom := 1sg-pronoun-lex &
  [ STEM < "es" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

es_acc := 1sg-pronoun-lex &
  [ STEM < "zis" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

es_gen := 1sg-pronoun-lex &
  [ STEM < "im" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

es_dat := 1sg-pronoun-lex &
  [ STEM < "intsi" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

es_abl := 1sg-pronoun-lex &
  [ STEM < "indzme" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

es_ins := 1sg-pronoun-lex &
  [ STEM < "indzmov" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; thou

dun_nom := 2sg-pronoun-lex &
  [ STEM < "dun" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

dun_acc := 2sg-pronoun-lex &
  [ STEM < "khez" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

dun_gen := 2sg-pronoun-lex &
  [ STEM < "khu" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

dun_dat := 2sg-pronoun-lex &
  [ STEM < "khezi" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

dun_abl := 2sg-pronoun-lex &
  [ STEM < "khezme" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

dun_ins := 2sg-pronoun-lex &
  [ STEM < "khezmov" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; he/she/it

an_nom := 3sg-pronoun-lex &
  [ STEM < "an" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

an_acc := 3sg-pronoun-lex &
  [ STEM < "zayn" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

an_gen := 3sg-pronoun-lex &
  [ STEM < "anor" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

an_dat := 3sg-pronoun-lex &
  [ STEM < "anor" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

an_abl := 3sg-pronoun-lex &
  [ STEM < "anke" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

an_ins := 3sg-pronoun-lex &
  [ STEM < "anov" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; we

menkh_nom := 1non-sg-pronoun-lex &
  [ STEM < "menkh" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

menkh_acc := 1non-sg-pronoun-lex &
  [ STEM < "mez" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

menkh_gen := 1non-sg-pronoun-lex &
  [ STEM < "mez" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

menkh_dat := 1non-sg-pronoun-lex &
  [ STEM < "mezi" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

menkh_abl := 1non-sg-pronoun-lex &
  [ STEM < "mezme" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

menkh_ins := 1non-sg-pronoun-lex &
  [ STEM < "mezmov" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; you

dukh_nom := 2non-sg-pronoun-lex &
  [ STEM < "dukh" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

dukh_acc := 2non-sg-pronoun-lex &
  [ STEM < "dzez" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

dukh_gen := 2non-sg-pronoun-lex &
  [ STEM < "dzer" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

dukh_dat := 2non-sg-pronoun-lex &
  [ STEM < "dzezi" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

dukh_abl := 2non-sg-pronoun-lex &
  [ STEM < "dzezme" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

dukh_ins := 2non-sg-pronoun-lex &
  [ STEM < "dzezmov" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; they

anonkh_nom := 3non-sg-pronoun-lex &
  [ STEM < "anonkh" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

anonkh_acc := 3non-sg-pronoun-lex &
  [ STEM < "zanonkh" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

anonkh_gen := 3non-sg-pronoun-lex &
  [ STEM < "anontsh" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

anonkh_dat := 3non-sg-pronoun-lex &
  [ STEM < "anontsh" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

anonkh_abl := 3non-sg-pronoun-lex &
  [ STEM < "anontshme" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

anonkh_ins := 3non-sg-pronoun-lex &
  [ STEM < "anontshmov" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; VERBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; intransitive

; sleep
khnanal := nom-intrans-verb-lex &
  [ STEM < "khnana" >,
    SYNSEM.LKEYS.KEYREL.PRED '_sleep_v_rel ].

; come
kugal := nom-intrans-verb-lex &
  [ STEM < "kuga" >,
    SYNSEM.LKEYS.KEYREL.PRED '_come_v_rel ].

; die
merrnil := nom-intrans-verb-lex &
  [ STEM < "merrni" >,
    SYNSEM.LKEYS.KEYREL.PRED '_die_v_rel ].

; fall
iynal := nom-intrans-verb-lex &
  [ STEM < "iyna" >,
    SYNSEM.LKEYS.KEYREL.PRED '_fall_v_rel ].

; go
ertal := nom-intrans-verb-lex &
  [ STEM < "erta" >,
    SYNSEM.LKEYS.KEYREL.PRED '_go_v_rel ].

; live
april := nom-intrans-verb-lex &
  [ STEM < "apri" >,
    SYNSEM.LKEYS.KEYREL.PRED '_live_v_rel ].

; play
xaghal := nom-intrans-verb-lex &
  [ STEM < "xagha" >,
    SYNSEM.LKEYS.KEYREL.PRED '_play_v_rel ].

; sneeze
phrrshtal := nom-intrans-verb-lex &
  [ STEM < "phrrshta" >,
    SYNSEM.LKEYS.KEYREL.PRED '_sneeze_v_rel ].

; wait (intransitive version)
spasel_i := nom-intrans-verb-lex &
  [ STEM < "spase" >,
    SYNSEM.LKEYS.KEYREL.PRED '_wait_v_rel ].

; wake up
arthnnal := nom-intrans-verb-lex &
  [ STEM < "arthnna" >,
    SYNSEM.LKEYS.KEYREL.PRED '_wake+up_v_rel ].

; walk
khalel := nom-intrans-verb-lex &
  [ STEM < "khale" >,
    SYNSEM.LKEYS.KEYREL.PRED '_walk_v_rel ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; transitive

; eat
utel := nom-acc-optobj-trans-verb-lex &
  [ STEM < "ute" >,
    SYNSEM.LKEYS.KEYREL.PRED '_eat_v_rel ].

; buy
gnel := nom-acc-trans-verb-lex &
  [ STEM < "gne" >,
    SYNSEM.LKEYS.KEYREL.PRED '_buy_v_rel ].

; drink
xmel := nom-acc-trans-verb-lex &
  [ STEM < "xme" >,
    SYNSEM.LKEYS.KEYREL.PRED '_drink_v_rel ].

; hurt
vnasel := nom-dat-trans-verb-lex &
  [ STEM < "vnase" >,
    SYNSEM.LKEYS.KEYREL.PRED '_hurt_v_rel ].

; love
sirel := nom-acc-trans-verb-lex &
  [ STEM < "sire" >,
    SYNSEM.LKEYS.KEYREL.PRED '_love_v_rel ].

; make
shinel := nom-acc-trans-verb-lex &
  [ STEM < "shine" >,
    SYNSEM.LKEYS.KEYREL.PRED '_make_v_rel ].

; paint
nerkel := nom-acc-trans-verb-lex &
  [ STEM < "nerke" >,
    SYNSEM.LKEYS.KEYREL.PRED '_paint_v_rel ].

; read
kardal := nom-acc-trans-verb-lex &
  [ STEM < "karda" >,
    SYNSEM.LKEYS.KEYREL.PRED '_read_v_rel ].

; see
tesnel := nom-acc-trans-verb-lex &
  [ STEM < "tesne" >,
    SYNSEM.LKEYS.KEYREL.PRED '_see_v_rel ].

; wait (take a dative object)
spasel_t := nom-dat-trans-verb-lex &
  [ STEM < "spase" >,
    SYNSEM.LKEYS.KEYREL.PRED '_wait_v_rel ].

; want
uzel := nom-acc-trans-verb-lex &
  [ STEM < "uze" >,
    SYNSEM.LKEYS.KEYREL.PRED '_want_v_rel ].

; wash
lval := nom-acc-trans-verb-lex &
  [ STEM < "lva" >,
    SYNSEM.LKEYS.KEYREL.PRED '_wash_v_rel ].

; watch
ditel := nom-acc-trans-verb-lex &
  [ STEM < "dite" >,
    SYNSEM.LKEYS.KEYREL.PRED '_watch_v_rel ].

; chase
halatsel := nom-acc-trans-verb-lex &
  [ STEM < "halatse" >,
    SYNSEM.LKEYS.KEYREL.PRED '_chase_v_rel ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ditransitive

; give
tal := nom-acc-dat-optobj-ditrans-verb-lex &
  [ STEM < "ta" >,
    SYNSEM.LKEYS.KEYREL.PRED '_give_v_rel ].

; sell
tsaxel := nom-acc-dat-ditrans-verb-lex &
  [ STEM < "tsaxe" >,
    SYNSEM.LKEYS.KEYREL.PRED '_sell_v_rel ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; raising

; be able
krnal := potential-aux-verb-lex &
  [ STEM < "krna" >,
    SYNSEM.LKEYS.KEYREL.PRED '_can_v_rel ].

; the negative copula
chhel := negative-aux-verb-lex &
  [ STEM < "chhe" >,
    SYNSEM.LKEYS.KEYREL.PRED '_neg_r_rel ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; clausal complement

; think
kartsel := nom-indic-clausal-verb-lex &
  [ STEM < "kartse" >,
    SYNSEM.LKEYS.KEYREL.PRED '_think_v_rel ].

; know
gitnal := nom-indic-clausal-verb-lex &
  [ STEM < "gitna" >,
    SYNSEM.LKEYS.KEYREL.PRED '_know_v_rel ].

; ask
xntrel := nom-interrog-clausal-verb-lex &
  [ STEM < "xntre" >,
    SYNSEM.LKEYS.KEYREL.PRED '_ask_v_rel ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; COMPLEMENTIZERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; that (declarative and interrogative)
the := comp-lex &
  [ STEM < "the" > ].

; that (declarative only)
or := decl-comp-lex &
  [ STEM < "or" > ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; DETERMINERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ERB 2007-08-27 This entry is commented out pending an implementation
; of its phonological dependencies, to keep the number of realizations
; under control in generation.  

; the (after or before a vowel)
;n := def-det-lex &
;  [ STEM < "n" >,
;    SYNSEM.LKEYS.KEYREL.PRED "exist_q_rel" ].

; the (after a consonant)
e := def-det-lex &
  [ STEM < "e" >,
    SYNSEM.LKEYS.KEYREL.PRED "exist_q_rel" ].

; a/an
me := indef-det-lex &
  [ STEM < "me" >,
    SYNSEM.LKEYS.KEYREL.PRED "exist_q_rel" ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; MISCELLANEOUS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

aragsren := adverb-lex &
  [ STEM <"aragsren">,
    SYNSEM.LKEYS.KEYREL.PRED '_quickly_r_rel ].

amuti := adjective-lex &
  [ STEM <"amuti">,
    SYNSEM.LKEYS.KEYREL.PRED '_hungry_a_rel ].

; Armenian demonstratives are really adjectives
; this (adj)
ays := demonstrative-adj-lex &
  [ STEM < "ays" >,
    SYNSEM.LKEYS.KEYREL.PRED proximal+dem_a_rel ].

; distal that (adj)
ayd := demonstrative-adj-lex &
  [ STEM < "ayd" >,
    SYNSEM.LKEYS.KEYREL.PRED distal+dem_a_rel ].

; remote that (adj)
ayn := demonstrative-adj-lex &
  [ STEM < "ayn" >,
    SYNSEM.LKEYS.KEYREL.PRED remote+dem_a_rel ].

; conjunction 'and'
ev_1 := conj-lex &
  [ STEM < "ev" >,
    SYNSEM.LKEYS.KEYREL.PRED "_and_coord_rel",
    CFORM "1" ] .
