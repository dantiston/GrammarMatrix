;;; -*- Mode: TDL; Package: LKB -*-
; NOUNS

aut := common-noun-lex &
	[ STEM < "aut" >,
		SYNSEM.LKEYS.KEYREL.PRED '_car_n_rel ].

akv := common-noun-lex &
	[ STEM < "akv" >,
		SYNSEM.LKEYS.KEYREL.PRED '_water_n_rel ].

arb := common-noun-lex &
	[ STEM < "arb" >,
		SYNSEM.LKEYS.KEYREL.PRED '_tree_n_rel ].

daktiluj := common-noun-lex &
	[ STEM < "daktiluj" >,
		SYNSEM.LKEYS.KEYREL.PRED '_date_palm_n_rel ].

dom := common-noun-lex &
	[ STEM < "dom" >,
		SYNSEM.LKEYS.KEYREL.PRED '_house_n_rel ].

estr := common-noun-lex &
	[ STEM < "estr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_master_n_rel ].

fakt := common-noun-lex &
	[ STEM < "fakt" >,
		SYNSEM.LKEYS.KEYREL.PRED '_fact_n_rel ].

farun := common-noun-lex &
	[ STEM < "farun" >,
		SYNSEM.LKEYS.KEYREL.PRED '_flour_n_rel ].

fulm := common-noun-lex &
	[ STEM < "fulm" >,
		SYNSEM.LKEYS.KEYREL.PRED '_lightning_n_rel ].

fum := common-noun-lex &
	[ STEM < "fum" >,
		SYNSEM.LKEYS.KEYREL.PRED '_smoke_n_rel ].

gxarden := common-noun-lex &
	[ STEM < "gxarden" >,
		SYNSEM.LKEYS.KEYREL.PRED '_garden_n_rel ].

har := common-noun-lex &
	[ STEM < "har" >,
		SYNSEM.LKEYS.KEYREL.PRED '_hair_n_rel ].

hund := common-noun-lex &
	[ STEM < "hund" >,
		SYNSEM.LKEYS.KEYREL.PRED '_dog_n_rel ].

infan := common-noun-lex &
	[ STEM < "infan" >,
		SYNSEM.LKEYS.KEYREL.PRED '_child_n_rel ].

kat := common-noun-lex &
	[ STEM < "kat" >,
		SYNSEM.LKEYS.KEYREL.PRED '_cat_n_rel ].

lernant := common-noun-lex &
	[ STEM < "lernant" >,
		SYNSEM.LKEYS.KEYREL.PRED '_student_n_rel ].

libr := common-noun-lex &
	[ STEM < "libr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_book_n_rel ].

nutradajx := common-noun-lex &
	[ STEM < "nutradajx" >,
		SYNSEM.LKEYS.KEYREL.PRED '_staple+food_n_rel ].

pac := common-noun-lex &
	[ STEM < "pac" >,
		SYNSEM.LKEYS.KEYREL.PRED '_peace_n_rel ].

pan := common-noun-lex &
	[ STEM < "pan" >,
		SYNSEM.LKEYS.KEYREL.PRED '_bread_n_rel ].

patrin := common-noun-lex &
	[ STEM < "patrin" >,
		SYNSEM.LKEYS.KEYREL.PRED '_mother_n_rel ].

pluv-n := common-noun-lex &
	[ STEM < "pluv" >,
		SYNSEM.LKEYS.KEYREL.PRED '_rain_n_rel ].

problem := common-noun-lex &
	[ STEM < "problem" >,
		SYNSEM.LKEYS.KEYREL.PRED '_problem_n_rel ].

rap := common-noun-lex &
	[ STEM < "rap" >,
		SYNSEM.LKEYS.KEYREL.PRED '_turnip_n_rel ].

regx := common-noun-lex &
	[ STEM < "regx" >,
		SYNSEM.LKEYS.KEYREL.PRED '_king_n_rel ].

sign := common-noun-lex &
	[ STEM < "sign" >,
		SYNSEM.LKEYS.KEYREL.PRED '_sign_n_rel ].

tomat := common-noun-lex &
	[ STEM < "tomat" >,
		SYNSEM.LKEYS.KEYREL.PRED '_tomato_n_rel ].

vintr := common-noun-lex &
	[ STEM < "vintr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_winter_n_rel ].

vir := common-noun-lex &
	[ STEM < "vir" >,
		SYNSEM.LKEYS.KEYREL.PRED '_man_n_rel ].

vitr := common-noun-lex &
	[ STEM < "vitr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_glass_n_rel ].

; ADJECTIVES

malsat := adjective-lex &
	[ STEM < "malsat" >,
		SYNSEM.LKEYS.KEYREL.PRED '_hungry_a_rel ].

bon := adjective-lex &
	[ STEM < "bon" >,
		SYNSEM.LKEYS.KEYREL.PRED '_good_j_rel ].

cxiu-adj := bare-adjective-lex &
	[ STEM < "cxiu" >,
		SYNSEM.LKEYS.KEYREL.PRED '_every_j_rel ].

dolcx := adjective-lex &
	[ STEM < "dolcx" >,
		SYNSEM.LKEYS.KEYREL.PRED '_sweet_j_rel ].

facil-adj := adjective-lex &
	[ STEM < "facil" >,
		SYNSEM.LKEYS.KEYREL.PRED '_easy_j_rel ].

felicx := adjective-lex &
	[ STEM < "felicx" >,
		SYNSEM.LKEYS.KEYREL.PRED '_happy_j_rel ].

flav := adjective-lex &
	[ STEM < "flav" >,
		SYNSEM.LKEYS.KEYREL.PRED '_yellow_j_rel ].

fort := adjective-lex &
	[ STEM < "fort" >,
		SYNSEM.LKEYS.KEYREL.PRED '_strong_j_rel ].

frenez-adj := adjective-lex &
	[ STEM < "frenez" >,
		SYNSEM.LKEYS.KEYREL.PRED '_crazy_j_rel ].

ilia-adj := adjective-lex &
	[ STEM < "ili" >,
		SYNSEM.LKEYS.KEYREL.PRED '_their_j_rel ].
; To be generated with a lexical rule from "ili" later.

jun := adjective-lex &
	[ STEM < "jun" >,
		SYNSEM.LKEYS.KEYREL.PRED '_young_j_rel ].

kaduk := adjective-lex &
	[ STEM < "kaduk" >,
		SYNSEM.LKEYS.KEYREL.PRED '_decrepit_j_rel ].

klar := adjective-lex &
	[ STEM < "klar" >,
		SYNSEM.LKEYS.KEYREL.PRED '_clear_j_rel ].

lert := adjective-lex &
	[ STEM < "lert" >,
		SYNSEM.LKEYS.KEYREL.PRED '_clever_j_rel ].

mia-adj := adjective-lex &
	[ STEM < "mi" >,
		SYNSEM.LKEYS.KEYREL.PRED '_my_j_rel ].
; To be generated with a lexical rule from "mi" later.

nia-adj := adjective-lex &
	[ STEM < "ni" >,
		SYNSEM.LKEYS.KEYREL.PRED '_our_j_rel ].
; To be generated with a lexical rule from "ni" later.

nigr := adjective-lex &
	[ STEM < "nigr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_black_j_rel ].

tia := bare-adjective-lex &
	[ STEM < "tia" >,
		SYNSEM.LKEYS.KEYREL.PRED '_such_j_rel ].
; To be generated with a lexical rule for correlatives later.

;tiu-adj := bare-adjective-lex &
;	[ STEM < "tiu" >,
;		SYNSEM.LKEYS.KEYREL.PRED '_that_j_rel ].

vintr-adj := adjective-lex &
	[ STEM < "vintr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_winter_j_rel ].

vitr-adj := adjective-lex &
	[ STEM < "vitr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_glass_j_rel ].

; ADVERBS

cxiam := bare-sc-adverb-lex &
	[ STEM < "cxiam" >,
		SYNSEM.LKEYS.KEYREL.PRED '_always_r_rel ].

facil-adv := infl-is-adverb-lex &
	[ STEM < "facil" >,
		SYNSEM.LKEYS.KEYREL.PRED '_easily_r_rel ].

hejm := infl-is-adverb-lex &
	[ STEM < "hejm" >,
		SYNSEM.LKEYS.KEYREL.PRED '_home_r_rel ].

hodiaux := bare-is-adverb-lex &
	[ STEM < "hodiaux" >,
		SYNSEM.LKEYS.KEYREL.PRED '_today_r_rel ].

ne := bare-sc-adverb-lex &
	[ STEM < "ne" >,
		SYNSEM.LKEYS.KEYREL.PRED '_neg_r_rel ].

nepr := infl-sc-adverb-lex &
	[ STEM < "nepr" >,
		SYNSEM.LKEYS.KEYREL.PRED '_definitely_r_rel ].

nur := bare-sc-adverb-lex &
	[ STEM < "nur" >,
		SYNSEM.LKEYS.KEYREL.PRED '_only_r_rel ].

oft := infl-sc-adverb-lex &
	[ STEM < "oft" >,
		SYNSEM.LKEYS.KEYREL.PRED '_often_r_rel ].

preciz-is := infl-is-adverb-lex &
	[ STEM < "preciz" >,
		SYNSEM.LKEYS.KEYREL.PRED '_precisely_r_rel ].

preciz-sc := infl-sc-adverb-lex &
	[ STEM < "preciz" >,
		SYNSEM.LKEYS.KEYREL.PRED '_precisely_r_rel ].

preskaux := bare-sc-adverb-lex &
	[ STEM < "preskaux" >,
		SYNSEM.LKEYS.KEYREL.PRED '_almost_r_rel ].

rapid := infl-is-adverb-lex &
	[ STEM < "rapid" >,
		SYNSEM.LKEYS.KEYREL.PRED '_quickly_r_rel ].

subit := infl-is-adverb-lex &
	[ STEM < "subit" >,
		SYNSEM.LKEYS.KEYREL.PRED '_suddenly_r_rel ].

tre := bare-is-adverb-lex &
	[ STEM < "tre" >,
		SYNSEM.LKEYS.KEYREL.PRED '_very_r_rel ].

tro := bare-is-adverb-lex &
	[ STEM < "tro" >,
		SYNSEM.LKEYS.KEYREL.PRED '_too_r_rel ].

; VERBS

cas := trans-verb-lex &
	[ STEM < "cas" >,
		SYNSEM.LKEYS.KEYREL.PRED '_chase_v_rel ].

am := trans-verb-lex &
	[ STEM < "am" >,
		SYNSEM.LKEYS.KEYREL.PRED '_like_v_rel ].

aper := itr-verb-lex &
	[ STEM < "aper" >,
		SYNSEM.LKEYS.KEYREL.PRED '_appear_v_rel ].

decid-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "decid" >,
		SYNSEM.LKEYS.KEYREL.PRED '_decide_v_rel ].

decid-q := interrogative-second-arg-trans-verb-lex &
	[ STEM < "decid" >,
		SYNSEM.LKEYS.KEYREL.PRED '_decide_v_rel ].

decid-trans := trans-verb-lex &
	[ STEM < "decid" >,
		SYNSEM.LKEYS.KEYREL.PRED '_decide_v_rel ].

demand-q := interrogative-second-arg-trans-verb-lex &
	[ STEM < "demand" >,
		SYNSEM.LKEYS.KEYREL.PRED '_ask_v_rel ].

demand-trans := trans-verb-lex &
	[ STEM < "demand" >,
		SYNSEM.LKEYS.KEYREL.PRED '_ask_v_rel ].

dev := raising-verb-lex &
	[ STEM < "dev" >,
		SYNSEM.LKEYS.KEYREL.PRED '_must_v_rel ].

dolor := trans-verb-lex &
	[ STEM < "dolor" >,
		SYNSEM.LKEYS.KEYREL.PRED '_hurt_v_rel ].

don := trans-verb-lex &
	[ STEM < "don" >,
		SYNSEM.LKEYS.KEYREL.PRED '_give_v_rel ].

dorm := itr-verb-lex &
	[ STEM < "dorm" >,
		SYNSEM.LKEYS.KEYREL.PRED '_sleep_v_rel ].

dub-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "dub" >,
		SYNSEM.LKEYS.KEYREL.PRED '_doubt_v_rel ].

dub-q := interrogative-second-arg-trans-verb-lex &
	[ STEM < "dub" >,
		SYNSEM.LKEYS.KEYREL.PRED '_doubt_v_rel ].

dub-trans := trans-verb-lex &
	[ STEM < "dub" >,
		SYNSEM.LKEYS.KEYREL.PRED '_doubt_v_rel ].

ekkusx := itr-verb-lex &
	[ STEM < "ekkusx" >,
		SYNSEM.LKEYS.KEYREL.PRED '_lie_down_v_rel ].

enir := dni-trans-verb-lex &
	[ STEM < "enir" >,
		SYNSEM.LKEYS.KEYREL.PRED '_enter_v_rel ].

esper-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "esper" >,
		SYNSEM.LKEYS.KEYREL.PRED '_hope_v_rel ].

esper-trans := trans-verb-lex &
	[ STEM < "esper" >,
		SYNSEM.LKEYS.KEYREL.PRED '_hope_v_rel ].

flu := itr-verb-lex &
	[ STEM < "flu" >,
		SYNSEM.LKEYS.KEYREL.PRED '_flow_v_rel ].

frenez-v := itr-verb-lex &
	[ STEM < "frenez" >,
		SYNSEM.LKEYS.KEYREL.PRED '_rave_v_rel ].

hav := comp-trans-verb-lex &
	[ STEM < "hav" >,
		SYNSEM.LKEYS.KEYREL.PRED '_have_v_rel ].
; Arguably dni-trans-verb-lex, but presumed to have
; mandatory complement so grammar will correctly treat
; such verbs if any exist.

ig-ke := imperative-second-arg-trans-verb-lex &
	[ STEM < "ig" >,
		SYNSEM.LKEYS.KEYREL.PRED '_make_v_rel ].

ig-trans := ditrans-verb-lex &
	[ STEM < "ig" >,
		SYNSEM.LKEYS.KEYREL.PRED '_make_v_rel ].

ir := itr-verb-lex &
	[ STEM < "ir" >,
		SYNSEM.LKEYS.KEYREL.PRED '_ir_v_rel ].

kresk := itr-verb-lex &
	[ STEM < "kresk" >,
		SYNSEM.LKEYS.KEYREL.PRED '_grow_v_rel ].

kuir := trans-verb-lex &
	[ STEM < "kuir" >,
		SYNSEM.LKEYS.KEYREL.PRED '_cook_v_rel ].

kur := itr-verb-lex &
	[ STEM < "kur" >,
		SYNSEM.LKEYS.KEYREL.PRED '_run_v_rel ].

leg-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "leg" >,
		SYNSEM.LKEYS.KEYREL.PRED '_read_v_rel ].

leg-trans := trans-verb-lex &
	[ STEM < "leg" >,
		SYNSEM.LKEYS.KEYREL.PRED '_read_v_rel ].

mangx := ini-trans-verb-lex &
	[ STEM < "mangx" >,
		SYNSEM.LKEYS.KEYREL.PRED '_eat_v_rel ].
; Arguably trans-verb-lex.

marsx := itr-verb-lex &
	[ STEM < "marsx" >,
		SYNSEM.LKEYS.KEYREL.PRED '_walk_v_rel ].

mok := trans-verb-lex &
	[ STEM < "mok" >,
		SYNSEM.LKEYS.KEYREL.PRED '_ridicule_v_rel ].

mort := itr-verb-lex &
	[ STEM < "mort" >,
		SYNSEM.LKEYS.KEYREL.PRED '_die_v_rel ].

paf := ini-trans-verb-lex &
	[ STEM < "paf" >,
		SYNSEM.LKEYS.KEYREL.PRED '_shoot_v_rel ].

pet-ke := imperative-second-arg-trans-verb-lex &
	[ STEM < "pet" >,
		SYNSEM.LKEYS.KEYREL.PRED '_request_v_rel ].

pet-trans := trans-verb-lex &
	[ STEM < "pet" >,
		SYNSEM.LKEYS.KEYREL.PRED '_request_v_rel ].

pluv-v := itr-verb-lex &
	[ STEM < "pluv" >,
		SYNSEM.LKEYS.KEYREL.PRED '_rain_v_rel ].

postul-ke := imperative-second-arg-trans-verb-lex &
	[ STEM < "postul" >,
		SYNSEM.LKEYS.KEYREL.PRED '_demand_v_rel ].

postul-trans := trans-verb-lex &
	[ STEM < "postul" >,
		SYNSEM.LKEYS.KEYREL.PRED '_demand_v_rel ].

pov := raising-verb-lex &
	[ STEM < "pov" >,
		SYNSEM.LKEYS.KEYREL.PRED '_can_v_rel ].

pens := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "pens" >,
		SYNSEM.LKEYS.KEYREL.PRED '_think_v_rel ].

sci-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "sci" >,
		SYNSEM.LKEYS.KEYREL.PRED '_know_v_rel ].

sci-q := interrogative-second-arg-trans-verb-lex &
	[ STEM < "sci" >,
		SYNSEM.LKEYS.KEYREL.PRED '_know_v_rel ].

sci-trans := trans-verb-lex &
	[ STEM < "sci" >,
		SYNSEM.LKEYS.KEYREL.PRED '_know_v_rel ].

supoz-ditrans := ditrans-verb-lex &
	[ STEM < "supoz" >,
		SYNSEM.LKEYS.KEYREL.PRED '_assume_v_rel ].

supoz-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "supoz" >,
		SYNSEM.LKEYS.KEYREL.PRED '_assume_v_rel ].

supoz-trans := trans-verb-lex &
	[ STEM < "supoz" >,
		SYNSEM.LKEYS.KEYREL.PRED '_assume_v_rel ].

tim-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "tim" >,
		SYNSEM.LKEYS.KEYREL.PRED '_fear_v_rel ].

tim-trans := trans-verb-lex &
	[ STEM < "tim" >,
		SYNSEM.LKEYS.KEYREL.PRED '_fear_v_rel ].

tond := trans-verb-lex &
	[ STEM < "tond" >,
		SYNSEM.LKEYS.KEYREL.PRED '_shear_v_rel ].

trov-ditrans := ditrans-verb-lex &
	[ STEM < "trov" >,
		SYNSEM.LKEYS.KEYREL.PRED '_find_v_rel ].

trov-ke := non-interrogative-second-arg-trans-verb-lex &
	[ STEM < "trov" >,
		SYNSEM.LKEYS.KEYREL.PRED '_find_v_rel ].

trov-q := interrogative-second-arg-trans-verb-lex &
	[ STEM < "trov" >,
		SYNSEM.LKEYS.KEYREL.PRED '_find_v_rel ].

trov-trans := dni-trans-verb-lex &
	[ STEM < "trov" >,
		SYNSEM.LKEYS.KEYREL.PRED '_find_v_rel ].
; Arguably trans-verb-lex, but presumed to require
; definite interpretation of missing complement so
; grammar will correctly treat such verbs if any exist.

vetur := itr-verb-lex &
	[ STEM < "vetur" >,
		SYNSEM.LKEYS.KEYREL.PRED '_travel_v_rel ].

vund := trans-verb-lex &
	[ STEM < "vund" >,
		SYNSEM.LKEYS.KEYREL.PRED '_wound_v_rel ].

; DETERMINERS

cxies := bare-det-lex &
	[ STEM < "cxies" >,
		SYNSEM.LKEYS.KEYREL.PRED "exist_q_rel" ].

cxiu-det := infl-det-lex &
	[ STEM < "cxiu" >,
		SYNSEM.LKEYS.KEYREL.PRED "exist_q_rel" ].

la := bare-det-lex &
	[ STEM < "la" >,
		SYNSEM
			[ LKEYS.KEYREL.PRED "exist_q_rel",
				LOCAL.CAT.VAL.SPEC
					< [ LOCAL
						[ CAT.HEAD.CASE case,
							CONT.HOOK.INDEX.PNG.NUM number ] ] >
			] ].

mia-det := infl-det-lex &
	[ STEM < "mia" >,
		SYNSEM.LKEYS.KEYREL.PRED "exist_q_rel" ].
; To be generated with a lexical rule from "mi" later.

nia-det := infl-det-lex &
	[ STEM < "nia" >,
		SYNSEM.LKEYS.KEYREL.PRED "exist_q_rel" ].
; To be generated with a lexical rule from "ni" later.

tiu-det := demonstrative-det-lex &
  [ STEM < "tiu" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED proximal+dem_a_rel ].

; PRONOUNS

mi := pronoun-lex &
	[ STEM < "mi" >,
		SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG
			[ PER first,
				NUM sg ] ].

ni := pronoun-lex &
	[ STEM < "ni" >,
		SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG
			[ PER first,
				NUM non-sg ] ].

ci := pronoun-lex &
	[ STEM < "ci" >,
		SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG
			[ PER second,
				NUM sg ] ].

; ERB 2007-05-21  Don't know what this is for, and it's
; giving us lots of realizations (esp coming from eng),
; so leave it out for now.

;vi-sg := pronoun-lex &
;	[ STEM < "vi" >,
;		SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG
;			[ PER second,
;				NUM sg ] ].

vi-non-sg := pronoun-lex &
	[ STEM < "vi" >,
		SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG
			[ PER second,
				NUM non-sg ] ].

; ERB 2007-05-27 Likewise, just one of these is enough
; until they contrast in more than just form!

li := 3sg-pronoun-lex &
	[ STEM < "li" > ].

;sxi := 3sg-pronoun-lex &
;	[ STEM < "sxi" > ].

;gxi := 3sg-pronoun-lex &
;	[ STEM < "gxi" > ].

;oni := 3sg-pronoun-lex &
;	[ STEM < "oni" > ].

;hi := 3sg-pronoun-lex &
;	[ STEM < "hi" > ].

;zi := 3sg-pronoun-lex &
;	[ STEM < "zi" > ].

ili := pronoun-lex &
	[ STEM < "ili" >,
		SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG
			[ PER third,
				NUM non-sg ] ].

;si-sg := 3sg-pronoun-lex &
;	[ STEM < "si" > ].

;si-non-sg := pronoun-lex &
;	[ STEM < "si" >,
;		SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG
;			[ PER third,
;				NUM non-sg ] ].

;tio := 3sg-pronoun-lex &
;	[ STEM < "tio" > ].

; COMPLEMENTIZERS

ke-dec := declarative-complementizer-lex-item &
	[ STEM < "ke" > ].

ke-imp := imperative-complementizer-lex-item &
	[ STEM < "ke" > ].

cxu := interrogative-complementizer-lex-item &
	[ STEM < "cxu" > ].

; CONJUNCTIONS

kaj := conj-lex &
	[ STEM < "kaj" >,
		SYNSEM.LKEYS.KEYREL.PRED '_and_coord_rel ].

