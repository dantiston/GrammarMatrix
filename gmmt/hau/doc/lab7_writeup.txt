Phenomena in Hausa

1. Yes/No questions in Hausa are formed using either intonation,
   lengthening the last vowel, or adding a question marking word
   ("koo", plus many others) either sentence-initially, or
   sentence-finally.  So the question "did you buy a car?" would be
   "ka-sàyaa mootàa?" (the last vowel is already long, so lengthening
   is redundant), "koo ka-sàyaa mootàa?" or "ka-sàyaa mootàa koo?".
   The word "koo" (or) can be replaced with a handful of other
   question markers including "dà" (and).  I decided not to deal with
   vowel lengthening, since I wasn't sure how to pick out the last
   word, and most of my lexicon seems to already have that long vowel.

2.  Embedded yes/no questions are introduced with a complementizer
    "koo" (whether).  An example would be "I asked whether the boy
    caught a thief", "naa-tàmbayàa koo yaaròo yaa-kaamàa b'àraawòo"
    (lit. 1sg.COMP ask whether boy 3m.COMP caught thief).

3. Embedded clauses are not any different from matrix clauses, except
   they are usually introduced by a complementizer.  Verbs tend to
   prefer certain complementizers, but the main one is "cêwa"
   (saying).  Sentences with a null complementizer are grammatical,
   such as "he told us he bought a car", "mùtûm yaa-gayàa manà
   yaa-sayàa mootàa" (lit. man 3m.COMP tell us.iobject 3m.COMP buy
   car).

4.  Imperatives in Hausa are formed in two ways.  For affirmative
    commands, in 2nd person singular, the imperative form of the verb
    is used.  This has a null PAC, so it iimplementations not overtly
    marked for person/number/gender.  The imperative imposes a a L-H
    tone pattern on the verb, regardless of the verb's original tone
    pattern (i.e., kaawoo->kàawoo).  The subjunctive form of the PAC
    is used in all other cases (negative commands, commands in other
    persons, and commands where the speaker chooses to identify the
    subject). In the negative subjunctive, the prohibitive particle
    kàda is used before the PAC. An example would be "don't you bring
    water!", "kàda ki-kaawoo ruwaa!".  The imperative form is "bring
    water!", "kàawoo ruwaa!".  I chose to just put the imperative form
    of the verb in the lexicon, since I don't think there's a way to
    specify tone changes for particular vowels in a word.


Implementation

1.    The customization script gave me a complementizer-lex-type and a head-comp rule which works to put a question marker at the end of a sentence.  The script also made a qpart-lex-item which inherited from the complementizer-lex-type.  I constrained the qpart-lex-item to be SF ques.  To get a question marker at the beginning of a sentence, I added a head-final-head-comp phrase which takes as its head daughter a question marker.  To differentiate the question markers from the complementizers, I added a feature COMPTYPE to comp, and gave them either the qmarker or cpmarker values.

I can parse a sentence with a sentence-initial question marker, but I can't get it to generate due to a runaway rule.  Also, sentences with a sentence-final question-marker grossly overgenerate. A big problem is that my head-opt-subj-phrase (for optional subjects) applies when it shouldn't and allows verbs to be marked subjectless when they already have a subject.  The question marker is looking to attach to S structures, so it's allowed to attach to these "subjectless" verbs (which are tagged as S structures).  I'm not quite sure how to constrain the daughter of the head-opt-subj-phrase to be a different type than the mother, so it doesn't overgenerate.  I tried constraining the complement of the daughter to have a SUBJ [HEAD noun], since the mother has SUBJ < >, but that doesn't seem to be working.

2.and 3.

For embedded clauses, I created two complementizer types, ques-complementizer-lex-item and prop-complementizer-lex-item.  I constrained each to be SF ques and SF prop respectively.  I also made them MC -, since they should never appear in matrix clauses.  I created types for transitive and ditransitive verbs with clausal complements.  I created [SF ques] and [SF prop] subtypes of each of these.  The complement of the transitive verb, and the second complement of the ditransitive verb are constrained to be MC - and HEAD comp.

I was puzzled at how to get sentences with null complementizers to parse.

4.  For imperatives, I created an imperative-phrase type inheriting from imp-head-opt-subj-phrase, and put an instance in the rules.tdl file. I also created a lexical rule to give the verb the correct person and number values (second person singular), as well as mark it as already inflected (imperative takes a null PAC).  The verb doesn't seem to want to feed through the rule, so the imperatives aren't parsing.  When I do interactive unification, it says that the INDEX value of the verb is a event, while the rule has an INDEX of ref-ind.  Do I need to specify a different parent for the rule, other than const-ltow-lex-rule?  

I also made the lexical rules for verb inflection only take a verb of FORM base, so the imperative doesn't get a PAC attached (as in "*ki-kàawoo ruuwaa!", bring water). 


Comments:

I couldn't get itsdb to run with all the spinning rules/overgeneration, so I couldn't get a final run of the test-suite.  I've included a baseline test suite. 

I struggled a lot in this lab with rules and phrase types spinning, and overgenerating.  I know that the way to fix this is to constrain the mother's features to be different than the daughters, but in a lot of cases I couldn't see how to do this.  For the phrase type I created for sentence final question markers (head-final-head-comp-phrase), I tried making the question marker MC na, and the phrase MC +.  The sentence wouldn't parse after that, so I took it off.  I know I need to fix the optional subject phrase-type (head-opt-subj-phrase), but I can't see a feature that would stop it the phrase-type from applying to itself, or to verbs that really have subject, and don't need the optional subject phrase rule.  
