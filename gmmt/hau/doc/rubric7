-------------------------------------------------------
Comments

 1. Yes/No questions in Hausa are formed using either intonation,
 lengthening the last vowel, or adding a question marking word ("koo",
 plus many others) either sentence-initially, or sentence-finally.  So
 the question "did you buy a car?" would be "ka-sàyaa mootàa?" (the
 last vowel is already long, so lengthening is redundant), "koo
 ka-sàyaa mootàa?" or "ka-sàyaa mootàa koo?".  The word "koo" (or) can
 be replaced with a handful of other question markers including "dà"
 (and).  I decided not to deal with vowel lengthening, since I wasn't
 sure how to pick out the last word, and most of my lexicon seems to
 already have that long vowel.

My first take on the vowel lengthening would be to treat it as
another kind of sentence-final question marker which a) is a clitic
and b) only consists of vowel lenght.  It then gloms onto the previous
word and takes on the quality of the vowel at the end of it.  Getting
this to work precisly would require more detail in the syntax/phonology
interface than we currently have :-)

 4.  Imperatives in Hausa are formed in two ways.  For affirmative
 commands, in 2nd person singular, the imperative form of the verb is
 used.  This has a null PAC, so it iimplementations not overtly marked
 for person/number/gender.  The imperative imposes a a L-H tone pattern
 on the verb, regardless of the verb's original tone pattern (i.e.,
 kaawoo->kàawoo).  The subjunctive form of the PAC is used in all other
 cases (negative commands, commands in other persons, and commands

Even in 2pl imperatives?  That's interesting....

 where the speaker chooses to identify the subject). In the negative
 subjunctive, the prohibitive particle kàda is used before the PAC. An
 example would be "don't you bring water!", "kàda ki-kaawoo ruwaa!".
 The imperative form is "bring water!", "kàawoo ruwaa!".  I chose to
 just put the imperative form of the verb in the lexicon, since I don't
 think there's a way to specify tone changes for particular vowels in a
 word.

You're right --- that's beyond LKB morphophonology.

 I can parse a sentence with a sentence-initial question marker, but I
 can't get it to generate due to a runaway rule.  Also, sentences with
 a sentence-final question-marker grossly overgenerate. A big problem
 is that my head-opt-subj-phrase (for optional subjects) applies when
 it shouldn't and allows verbs to be marked subjectless when they
 already have a subject.  The question marker is looking to attach to S
 structures, so it's allowed to attach to these "subjectless" verbs
 (which are tagged as S structures).  I'm not quite sure how to
 constrain the daughter of the head-opt-subj-phrase to be a different
 type than the mother, so it doesn't overgenerate.  I tried
 constraining the complement of the daughter to have a SUBJ [HEAD
 noun], since the mother has SUBJ < >, but that doesn't seem to be
 working.

Did the fixes we made last week during my office hours fix the
overgeneration involving the "subjectless" verbs?  The definition
in matrix.tdl should already keep this rule from spinning...

 I was puzzled at how to get sentences with null complementizers to parse.

 clausal-comp-trverb-lex := verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL[ CAT.VAL [COMPS < [LOCAL.CAT [MC -, VAL [SUBJ < > , COMPS < > ], HEAD comp ]]> ], CONT.HOOK.INDEX.SF prop-or-ques ]].

Instead of having this type say its COMP is [HEAD comp], have it
select for the supertype of comp and verb, i.e., [HEAD +vc].

But you should  post questions like this to EPost, rather than waiting
for me to read your write up (which tends to be about a week later!).

 4.  For imperatives, I created an imperative-phrase type inheriting
 from imp-head-opt-subj-phrase, and put an instance in the rules.tdl
 file. I also created a lexical rule to give the verb the correct
 person and number values (second person singular), as well as mark it
 as already inflected (imperative takes a null PAC).  The verb doesn't
 seem to want to feed through the rule, so the imperatives aren't
 parsing.  When I do interactive unification, it says that the INDEX
 value of the verb is a event, while the rule has an INDEX of ref-ind.
 Do I need to specify a different parent for the rule, other than
 const-ltow-lex-rule?

The problem is that you are constraining the verb's own INDEX to be
2nd person, rather than the verb's subject's INDEX:

 imperative-verb-lex-rule := const-ltow-rule &
 [ SYNSEM.LOCAL [CAT.VAL [ SUBJ < >], 
                 CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER second]],
   DTR.SYNSEM.LOCAL.CAT [ HEAD verb & [FORM imp ]]].

The feature PNG is only compatible with things of type ref-ind, while
the verb's own index is of type event.  There's a second problem as
well, though:  The phrase structure rules want daughters which are
[INFLECTED +] and your imperative lexical entries are [INFLECTED -].
You can either change that about the lexical entries (which will require
moving the constraint off the supertype), or write a constant-ltow-rule
which just says that it's DTR has to be a verb which is [FORM imp].
That will produce the [INFLECTED +] entries.

 I struggled a lot in this lab with rules and phrase types spinning,
 and overgenerating.  I know that the way to fix this is to constrain
 the mother's features to be different than the daughters, but in a lot
 of cases I couldn't see how to do this.  For the phrase type I created
 for sentence final question markers (head-final-head-comp-phrase), I
 tried making the question marker MC na, and the phrase MC +.  The
 sentence wouldn't parse after that, so I took it off.  I know I need
 to fix the optional subject phrase-type (head-opt-subj-phrase), but I
 can't see a feature that would stop it the phrase-type from applying
 to itself, or to verbs that really have subject, and don't need the
 optional subject phrase rule.

I think in the end the problem was mostly due to the underconstrained
head-complement rule that you added.  As a general debugging strategy,
looking into what's going on in extra parses when you have one sentence
parsing many different ways can often lead you to what's going on.
Also, posting questions to EPost when this sort of thing happens (or
bringing your grammar to my OH) also works well :-)

There's a typo in this lexical entry (the " after 'base' should
be after '_catch_v_rel instead):

kaamàa := transitive-verb-lex &
  [ STEM < "kaamàa" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_catch_v_rel,
	LOCAL.CAT.HEAD.FORM base "] ] .

Your semantics for "naa-tàmbayàa koo yaaròo yaa-kaamàa `bàraawòo" is
slightly broken.  The ARG2 of the _ask_v_rel should be related through
a qeq to the LBL of the _catch_v_rel. 

clausal-comp-trverb-lex := verb-lex & clausal-second-arg-trans-lex-item &
[ SYNSEM.LOCAL[ CAT.VAL [COMPS < [LOCAL.CAT [MC -, VAL [SUBJ < > , COMPS < > ], HEAD comp ]]> ], CONT.HOOK.INDEX.SF prop-or-ques ]].

The problem is that the type clausal-comp-trverb-lex is not relating
the thing on the COMPS list to the second element of ARG-ST.  Since
clausal-second-arg-trans-lex-item uses ARG-ST to link to the semantics,
the chain gets broken.  

Item 81 from your test suite (mùtûm yaa-gayàa manà cêwaa yaa-sàyaa mootàa)
gets two parses, where it should only get one.  The problem appears to be
that the first complement of yaa-gayàa isn't constrained to be SPR < >,
so that  manà is okay whether or not it goes through the bare-np rule.

Your grammar is parsing this string, which I take to be ungrammatical:

  naa-tàmbayàa yaaròo yaa-kaamàa `bàraawòo koo

