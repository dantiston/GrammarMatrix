Kelly O'Hara
Ling 567
Lab 7 Writeup
18 February 2007


I feel like I wasn't as thorough as I could have been, mostly because I spent a long time catching up with lab 6.  I know I said I would write up those changes here, but I don't have time now. However, I put a lot of effort into it, and am pleased with the results, so I will send you a writeup of those changes separately.

Matrix yes-no questions in Zulu are marked by a question particle at the end of the sentence. The customization script automatically makes this a complementizer.  Embedded clauses in Zulu also require a complementizer, but this one appears at the beginning of the embedded clause.  Compare the following two examples:

ngi-bon-a ukuthi umu-ntwana u-zo-dlal-a
1SG-see-FV that C1-child SC1-FUT(IMM)-play-FV
'I see that the child will play'

umu-ntwana u-zo-dlal-a na
C1-child SC1-FUT(IMM)-play-FV QP 
'Will the child play?'

In the first sentence, the complementizer `ukuthi' precedes the clause it's attached to. In the second sentence, the question particle `na' follows the clause.  To solve this problem, I created two subtypes of complementizer-lex-item: qpart-lex-item and emb-comp-lex-item. The question particle is the first type, other complementizers are the second.  I then made two subtypes of comp-head-phrase: qpart-head-phrase and embedded-comp-head-phrase, each of which constrain their DTR to be of the corresponding lexical type. qpart-head-phrase is head-final and MC +; embedded-comp-head-phrase is head-initial and MC -. Problem solved!

As I have mentioned before, sentences that would translate as embedded interrogatives in English are not interrogative in form in Zulu. There is a distinction between verbs that take can indicative complements (e.g. think, know, say, ask) and those that only take subjunctive complements (e.g. like, want, desire). I did not include any subjunctive examples, although perhaps I should have.

I included a second embedded-clause complementizer, in addition to the one given above:

u-mama u-zibuz-a ukuba umu-ntwana u-zo-dlal-a
C1a-mother SC1a-wonder-FV that C1-child 
'Mother wonders (lit: asks herself) if the child will play'

There does not appear to be a semantic difference between `ukuba' and `ukuthi'; both are translated as `that', and appear to be used interchangeably.  Also, I haven't analyzed the verb zibuz-a which is actually buz-a `ask' plus the reflexive marker zi-.

I made a present tense rule for the matrix clause, because the sentences sounded funny to me with both clauses in future tense. I had no other motivation for doing so, and it caused all sorts of problems (especially with imperatives, see below), so I think I'll take it out and just let the sentences sound funny.

Right now, embedded clauses are neither over- nor under-generating.

There isn't much to say about yes-no questions. It is perhaps the only thing so far that has just worked out of the box. As I mentioned above, the question particle is a complementizer, with [SF ques]. I made a special qpart-head-phrase just for the question particle; it is a subtype of head-comp-phrase and head-final.Question particles also differ from othe complementizers in that they are MC+ rather than MC -.

As for imperatives, the basic imperatives were easy to get working. I just followed the instructions (with one modification, explained below) and basic examples like these parse just fine:

gijim-a
run-FV
`Run!'

shay-a-ni in-ja
hit-FV-PL C9-dog
`Hit the dog!'

Imperatives agree with the number of their subject, which is marked by a suffix on the verb. To accomplish this I just made two subtypes of imperative-verb-lex-rule, one constrained to be SG and the other constrained to be PL. Notice that these do not have tense markers or any other agreement marking. To get this working, I had to make my imperative rule a lexeme-to-word rule, because the only other lexeme-to-word rule I had was the subject concord rule. This bypasses tense marking and object concords as well.  The problem is that imperatives can in fact take an object concord:

yi-shay-a in-ja
OC9-hit-FV C9-dog
`Hit the dog!'

(please excuse the violent example; it's taken from one of my sources). I added a supertype to imperative-verb-lex-rule that allowed it to go through the object concord lexical rules. But this in turn allowed the imperatives to go through the tense rules, and from there, the subject concord rules. Overt tense marking and subject concords are not allowed on imperative verbs. I decided to fix it by constraining verb-tense-lex-rule to be INFLECTED -.  Since the imperative rule is lexeme-to-word, imperatives are INFLECTED +. I thought myself very clever until I tried parsing:

u-yi-shay-a in-ja
2sg-OC9-hit-FV C9-dog
`You hit the dog'

I expected it to fail, but it parses just fine. It took me a moment to figure out that it was the present tense that was at fault. This is not an imperative, but a simple declarative sentence with a zero tense marker and a dropped subject. Oops. As of this writing, I haven't fixed this, but it will be easy to do. I'll make all my test suite embedded clause sentences future tense in the matrix clause, and get rid of the present tense altogether. That feels like cheating, but I'm not sure how else to stop it.

All of this is further complicated by the fact that imperatives can appear with an overt subject:

u-Sipho gijim-a
C1a-Sipho run-fv
`Sipho, run!'

I intentionally didn't constrain my imperatives to be second person in hopes of covering this type of phrase, but I would need another phrase rule to cover it.  Right now this parses, but if you look at the chart, these are also parsing as present tense with a dropped subject. The SV value is prop-or-ques rather than comm.  I wonder if I should forget about trying to parse this for now.

Needless to say, my grammar grossly overgenerates imperatives.

Negation of imperatives is done via an auxiliary verb, rather than the prefix that marks declaratives. I did not have time to get this working.









  


