;;;MZ added

cani := pl-male-common-noun-lex &
   [ STEM < "cani" >,
     SYNSEM.LKEYS.KEYREL.PRED "_dog_n_rel" ].

gatti := pl-male-common-noun-lex &
   [ STEM < "gatti" >,
     SYNSEM.LKEYS.KEYREL.PRED "_cat_n_rel" ].

macchine := pl-female-common-noun-lex &
   [ STEM < "macchine" >,
     SYNSEM.LKEYS.KEYREL.PRED "_car_n_rel" ].


insegu := ire-trans-verb-lex &
   [ STEM < "insegu" >,
     SYNSEM.LKEYS.KEYREL.PRED "_chase_v_rel" ].

pens := are-decl-embedded-verb-lex &
   [ STEM < "pens" >,
     SYNSEM.LKEYS.KEYREL.PRED "_think_v_rel" ].

sai := 2sg-irreg-embedded-verb-lex &
   [ STEM < "sai" >,
     SYNSEM.LKEYS.KEYREL.PRED "_know_v_rel" ].


affamat := stem-adj-lex &
   [ STEM < "affamat" >,
     SYNSEM.LKEYS.KEYREL.PRED "_hungry_a_rel" ].


;;;;

;;; Nouns

amico := sg-male-common-noun-lex &
   [ STEM < "amico" >,
     SYNSEM.LKEYS.KEYREL.PRED "_friend_n_rel" ].

amici := pl-male-common-noun-lex &
   [ STEM < "amici" >,
     SYNSEM.LKEYS.KEYREL.PRED "_friend_n_rel" ].

cane := sg-male-common-noun-lex &
   [ STEM < "cane" >,
     SYNSEM.LKEYS.KEYREL.PRED "_dog_n_rel" ].

casa := sg-female-common-noun-lex &
   [ STEM < "casa" >,
     SYNSEM.LKEYS.KEYREL.PRED "_house_n_rel" ].

coltello := sg-male-common-noun-lex &
   [ STEM < "coltello" >,
     SYNSEM.LKEYS.KEYREL.PRED "_knife_n_rel" ].

conforto := sg-male-proper-noun-lex &
   [ STEM < "conforto" >,
     SYNSEM.LKEYS.KEYREL.PRED "_comfort_n_rel" ].

cosa := sg-female-common-noun-lex &
   [ STEM < "cosa" >,
     SYNSEM.LKEYS.KEYREL.PRED "_thing_n_rel" ].

Dio := sg-male-proper-noun-lex &
   [ STEM < "Dio" >,
     SYNSEM.LKEYS.KEYREL.PRED "_god_n_rel" ].

donna := sg-female-common-noun-lex &
   [ STEM < "donna" >,
     SYNSEM.LKEYS.KEYREL.PRED "_woman_n_rel" ].

film-sg := sg-male-common-noun-lex &
   [ STEM < "film" >,
     SYNSEM.LKEYS.KEYREL.PRED "_film_n_rel" ].

film-pl := pl-male-common-noun-lex &
   [ STEM < "film" >,
     SYNSEM.LKEYS.KEYREL.PRED "_film_n_rel" ].

figlio := sg-male-common-noun-lex &
   [ STEM < "figlio" >,
     SYNSEM.LKEYS.KEYREL.PRED "_son_n_rel" ].

figlio2 := sg-male-common-noun-lex &
   [ STEM < "figlio" >,
     SYNSEM.LKEYS.KEYREL.PRED "_child_n_rel" ].

foro := sg-male-common-noun-lex &
   [ STEM < "figlio" >,
     SYNSEM.LKEYS.KEYREL.PRED "_child_n_rel" ].

giosuè := sg-male-proper-noun-lex &
   [ STEM < "giosuè" >,
     SYNSEM.LKEYS.KEYREL.PRED "_joshua_n_rel" ].

libro := sg-male-common-noun-lex &
   [ STEM < "libro" >,
     SYNSEM.LKEYS.KEYREL.PRED "_book_n_rel" ].

libri := pl-male-common-noun-lex &
   [ STEM < "libri" >,
     SYNSEM.LKEYS.KEYREL.PRED "_books_n_rel" ].

luce := sg-female-common-noun-lex &
   [ STEM < "luce" >,
     SYNSEM.LKEYS.KEYREL.PRED "_light_n_rel" ].

male := sg-male-opt-spr-common-noun-lex &
   [ STEM < "male" >, 
     SYNSEM.LKEYS.KEYREL.PRED "_harm_n_rel" ].

maria := sg-female-proper-noun-lex &
   [ STEM < "maria" >,
     SYNSEM.LKEYS.KEYREL.PRED "_Mary_n_rel" ].

marta := sg-female-proper-noun-lex &
   [ STEM < "marta" >,
     SYNSEM.LKEYS.KEYREL.PRED "_Marta_n_rel" ].

milano := sg-male-city-noun-lex &
   [ STEM < "milano" >,
     SYNSEM.LKEYS.KEYREL.PRED "_Milano_n_rel" ].

moglie := sg-female-common-noun-lex &
   [ STEM < "moglie" >,
     SYNSEM.LKEYS.KEYREL.PRED "_wife_n_rel" ].

padre := sg-male-common-noun-lex &
   [ STEM < "padre" >,
     SYNSEM.LKEYS.KEYREL.PRED "_father_n_rel" ].

pasta := sg-female-common-noun-lex &
   [ STEM < "pasta" >,
     SYNSEM.LKEYS.KEYREL.PRED "_staple+food_n_rel" ].

pane := sg-male-common-noun-lex &
   [ STEM < "pane" >,
     SYNSEM.LKEYS.KEYREL.PRED "_bread_n_rel" ].

persona := sg-female-common-noun-lex &
   [ STEM < "persona" >,
     SYNSEM.LKEYS.KEYREL.PRED "_person_n_rel" ].

persone := pl-female-common-noun-lex &
   [ STEM < "persone" >,
     SYNSEM.LKEYS.KEYREL.PRED "_people_n_rel" ].

m-presidente := sg-male-common-noun-lex &
   [ STEM < "presidente" >,
     SYNSEM.LKEYS.KEYREL.PRED "_president_n_rel" ].

f-presidente := sg-female-common-noun-lex &
   [ STEM < "presidente" >,
     SYNSEM.LKEYS.KEYREL.PRED "_president_n_rel" ].

professore := sg-male-common-noun-lex &
   [ STEM < "professore" >,
     SYNSEM.LKEYS.KEYREL.PRED "_professore_n_rel" ].

ragazzo := sg-male-common-noun-lex &
   [ STEM < "ragazzo" >,
     SYNSEM.LKEYS.KEYREL.PRED "_boy_n_rel" ].

ragazza := sg-female-common-noun-lex &
   [ STEM < "ragazza" >,
     SYNSEM.LKEYS.KEYREL.PRED "_girl_n_rel" ].

ragazzi := pl-male-common-noun-lex &
   [ STEM < "ragazzi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_youths_n_rel" ].

ragazze := pl-female-common-noun-lex &
   [ STEM < "ragazze" >,
     SYNSEM.LKEYS.KEYREL.PRED "_girls_n_rel" ].

riso := sg-male-common-noun-lex &
   [ STEM < "riso" >,
     SYNSEM.LKEYS.KEYREL.PRED "_rice_n_rel" ].

rivista := sg-female-common-noun-lex &
   [ STEM < "rivista" >,
     SYNSEM.LKEYS.KEYREL.PRED "_magazine_n_rel" ].

riviste := pl-female-common-noun-lex &
   [ STEM < "riviste" >,
     SYNSEM.LKEYS.KEYREL.PRED "_magazines_n_rel" ].

sangue := sg-male-common-noun-lex &
   [ STEM < "sangue" >,
     SYNSEM.LKEYS.KEYREL.PRED "_blood_n_rel" ].

sole := sg-male-common-noun-lex &
   [ STEM < "sole" >,
     SYNSEM.LKEYS.KEYREL.PRED "_sun_n_rel" ].

stadio := sg-male-common-noun-lex &
   [ STEM < "stadio" >,
     SYNSEM.LKEYS.KEYREL.PRED "_stadium_n_rel" ].

stadi := pl-male-common-noun-lex &
   [ STEM < "stadi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_stadiums_n_rel" ].

studente := sg-male-common-noun-lex &
   [ STEM < "studente" >,
     SYNSEM.LKEYS.KEYREL.PRED "_student_n_rel" ].

studenti := pl-male-common-noun-lex &
   [ STEM < "studenti" >,
     SYNSEM.LKEYS.KEYREL.PRED "_students_n_rel" ].

vetro := sg-male-common-noun-lex &
   [ STEM < "vetro" >,
     SYNSEM.LKEYS.KEYREL.PRED "_glass_n_rel" ].

zia := sg-female-common-noun-lex &
   [ STEM < "zia" >,
     SYNSEM.LKEYS.KEYREL.PRED "_aunt_n_rel" ].

;;;Pronouns

io := nom-pronoun-lex &
        [ STEM < "io" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER first,
					     NUM sg ] ].

me := prep-pronoun-lex &
        [ STEM < "me" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER first,
					     NUM sg ] ].

tu := nom-pronoun-lex &
        [ STEM < "tu" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER second,
					     NUM sg] ].

te := prep-pronoun-lex &
        [ STEM < "te" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER second,
					     NUM sg] ].

lei-she := nom-pronoun-lex &
        [ STEM < "lei" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER third,
					     NUM sg,
					     GEND female] ].

lei-you := nom-pronoun-lex &
        [ STEM < "lei" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER third,
					     NUM sg] ].

lei-prep := prep-pronoun-lex &
        [ STEM < "lei" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER third,
					     NUM sg] ].

lui := nom-pronoun-lex &
        [ STEM < "lui" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER third,
					     NUM sg,
					     GEND male] ].

lui2 := prep-pronoun-lex &
        [ STEM < "lui" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER third,
					     NUM sg] ].

noi := nom-pronoun-lex &
        [ STEM < "noi" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER first,
					     NUM non-sg] ].

noi2 := prep-pronoun-lex &
        [ STEM < "noi" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER first,
					     NUM non-sg] ].

voi := nom-pronoun-lex &
        [ STEM < "voi" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER second,
					     NUM non-sg] ].

voi2 := prep-pronoun-lex &
        [ STEM < "voi" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER second,
					     NUM non-sg] ].
loro := nom-pronoun-lex &
        [ STEM < "loro" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER third,
					     NUM non-sg] ].
loro2 := prep-pronoun-lex &
        [ STEM < "loro" >,
          SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER third,
					     NUM non-sg] ].

;;; Verbs

am := are-def-trans-verb-lex &
   [ STEM < "am" >,
     SYNSEM.LKEYS.KEYREL.PRED "_love_v_rel" ].

and := are-intrans-verb-lex &
   [ STEM < "and" >,
     SYNSEM.LKEYS.KEYREL.PRED "_go_v_rel" ].

aiut := are-trans-verb-lex &
   [ STEM < "aiut" >,
     SYNSEM.LKEYS.KEYREL.PRED "_help_v_rel" ].

baci := are-trans-verb-lex &
   [ STEM < "baci" >,
     SYNSEM.LKEYS.KEYREL.PRED "_kiss_v_rel" ].

bev := ere-ini-comp-trans-verb-lex &
   [ STEM < "bev" >,
     SYNSEM.LKEYS.KEYREL.PRED "_drink_v_rel" ].

brill := are-intrans-verb-lex &
   [ STEM < "brill" >,
     SYNSEM.LKEYS.KEYREL.PRED "_shine_v_rel" ].

cad := ere-intrans-verb-lex &
   [ STEM < "cad" >,
     SYNSEM.LKEYS.KEYREL.PRED "_fall_v_rel" ].

calci := are-trans-verb-lex &
   [ STEM < "calci" >,
     SYNSEM.LKEYS.KEYREL.PRED "_kick_v_rel" ].

cant := are-ini-comp-trans-verb-lex &
   [ STEM < "cant" >,
     SYNSEM.LKEYS.KEYREL.PRED "_sing_v_rel" ].

colp := ire-trans-verb-lex &
   [ STEM < "colp" >,
     SYNSEM.LKEYS.KEYREL.PRED "_hit_v_rel" ].

compr := are-trans-verb-lex &
   [ STEM < "compr" >,
     SYNSEM.LKEYS.KEYREL.PRED "_buy_v_rel" ].

corr := ere-intrans-verb-lex &
   [ STEM < "corr" >,
     SYNSEM.LKEYS.KEYREL.PRED "_run_v_rel" ].

conosc := ere-def-trans-verb-lex &
   [ STEM < "conosc" >,
     SYNSEM.LKEYS.KEYREL.PRED "_know_v_rel" ].

conosc2 := ere-def-trans-verb-lex &
   [ STEM < "conosc" >,
     SYNSEM.LKEYS.KEYREL.PRED "_meet_v_rel" ].

cred := ere-decl-embedded-verb-lex &
   [ STEM < "cred" >,
     SYNSEM.LKEYS.KEYREL.PRED "_beleive_v_rel" ].

cri := are-trans-verb-lex &
   [ STEM < "cri" >,
     SYNSEM.LKEYS.KEYREL.PRED "_create_v_rel" ].

d := are-ditrans-verb-lex &
   [ STEM < "d" >,
     SYNSEM.LKEYS.KEYREL.PRED "_give_v_rel" ].

dev := ere-modal-verb-lex &
   [ STEM < "dev" >,
     SYNSEM.LKEYS.KEYREL.PRED "_should_v_rel" ].

dic := ere-decl-embedded-verb-lex &
   [ STEM < "dic" >,
     SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel" ].

domand := are-int-embedded-verb-lex &
   [ STEM < "domand" >,
     SYNSEM.LKEYS.KEYREL.PRED "_ask_v_rel" ].

dorm := ire-intrans-verb-lex &
   [ STEM < "dorm" >,
     SYNSEM.LKEYS.KEYREL.PRED "_sleep_v_rel" ].

duole := 3sg-irreg-trans-verb-lex &
   [ STEM < "duole" >,
     SYNSEM.LKEYS.KEYREL.PRED "_hurt_v_rel" ].

e-trans := 3sg-irreg-trans-verb-lex &
   [ STEM < "è" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

e-prep := 3sg-irreg-prep-verb-lex &
   [ STEM < "è" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

e-copula := 3sg-irreg-copula-verb-lex  &
   [ STEM < "è" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

;f := are-def-trans-verb-lex &
;   [ STEM < "f" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_make_v_rel" ].


; ERB 2007-05-22 Treating 'non mi-f-a male' as
; a ditransitive verb.

f := are-ditrans-verb-lex &
   [ STEM < "f" >,
     SYNSEM.LKEYS.KEYREL.PRED "_make_v_rel" ].

h := are-trans-verb-lex &
   [ STEM < "h" >,
     SYNSEM.LKEYS.KEYREL.PRED "_have_v_rel" ].

guard := are-intrans-verb-lex &
   [ STEM < "guard" >,
     SYNSEM.LKEYS.KEYREL.PRED "_look_v_rel" ].

invi := are-ditrans-verb-lex &
   [ STEM < "invi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_send_v_rel" ].

lavor := are-intrans-verb-lex &
   [ STEM < "lavor" >,
     SYNSEM.LKEYS.KEYREL.PRED "_work_v_rel" ].

legg-trans := ere-ini-comp-trans-verb-lex &
   [ STEM < "legg" >,
     SYNSEM.LKEYS.KEYREL.PRED "_read_v_rel" ].

mangi := are-ini-comp-trans-verb-lex &
   [ STEM < "mangi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_eat_v_rel" ].

pag := are-trans-verb-lex &
   [ STEM < "pag" >,
     SYNSEM.LKEYS.KEYREL.PRED "_pay_v_rel" ].

piac := ere-def-trans-verb-lex &
   [ STEM < "piac" >,
     SYNSEM.LKEYS.KEYREL.PRED "_please_v_rel" ].

piang := ere-intrans-verb-lex &
   [ STEM < "piang" >,
     SYNSEM.LKEYS.KEYREL.PRED "_cry_v_rel" ].

prend := ere-trans-verb-lex &
   [ STEM < "prend" >,
     SYNSEM.LKEYS.KEYREL.PRED "_take_v_rel" ].

possiamo := 1pl-irreg-modal-verb-lex &
   [ STEM < "possiamo" >,
     SYNSEM.LKEYS.KEYREL.PRED "_can_v_rel" ].

posso := 1sg-irreg-modal-verb-lex &
   [ STEM < "posso" >,
     SYNSEM.LKEYS.KEYREL.PRED "_can_v_rel" ].

posso2 := 1sg-irreg-modal2-verb-lex &
   [ STEM < "posso" >,
     SYNSEM.LKEYS.KEYREL.PRED "_can_v_rel" ].

può := 3sg-irreg-modal-verb-lex &
   [ STEM < "può" >,
     SYNSEM.LKEYS.KEYREL.PRED "_can_v_rel" ].

può2 := 3sg-irreg-modal2-verb-lex &
   [ STEM < "può" >,
     SYNSEM.LKEYS.KEYREL.PRED "_can_v_rel" ].

rid := ere-intrans-verb-lex &
   [ STEM < "rid" >,
     SYNSEM.LKEYS.KEYREL.PRED "_laugh_v_rel" ].

rispett := are-trans-verb-lex &
   [ STEM < "rispett" >,
     SYNSEM.LKEYS.KEYREL.PRED "_respect_v_rel" ].

scriv := ere-def-trans-verb-lex &
   [ STEM < "scriv" >,
     SYNSEM.LKEYS.KEYREL.PRED "_write_v_rel" ].

sorg := ere-intrans-verb-lex &
   [ STEM < "sorg" >,
     SYNSEM.LKEYS.KEYREL.PRED "_rise_v_rel" ].

studi := are-def-trans-verb-lex &
   [ STEM < "studi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_studies_v_rel" ].

sei-trans := 2sg-irreg-trans-verb-lex &
   [ STEM < "sei" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

sei-copula := 2sg-irreg-copula-verb-lex &
   [ STEM < "sei" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

so := 1sg-irreg-embedded-verb-lex &
   [ STEM < "so" >,
     SYNSEM.LKEYS.KEYREL.PRED "_know_v_rel" ].

sono1 := 1sg-irreg-trans-verb-lex &
   [ STEM < "sono" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

sono3 := 3pl-irreg-trans-verb-lex &
   [ STEM < "sono" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

sono1-prep := 1sg-irreg-prep-verb-lex &
   [ STEM < "sono" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

sono3-prep := 3pl-irreg-prep-verb-lex &
   [ STEM < "sono" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

sono1-copula := 1sg-irreg-copula-verb-lex &
   [ STEM < "sono" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

sono3-copula := 3pl-irreg-copula-verb-lex &
   [ STEM < "sono" >,
     SYNSEM.LKEYS.KEYREL.PRED "_be_v_rel" ].

ved := ere-trans-verb-lex &
   [ STEM < "ved" >,
     SYNSEM.LKEYS.KEYREL.PRED "_respect_v_rel" ].

vend := ere-ditrans-verb-lex &
   [ STEM < "vend" >,
     SYNSEM.LKEYS.KEYREL.PRED "_sell_v_rel" ].

ven := ire-intrans-verb-lex &
   [ STEM < "ven" >,
     SYNSEM.LKEYS.KEYREL.PRED "_come_v_rel" ].

voi-verb := 2sg-irreg-modal-verb-lex &
   [ STEM < "voi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_want_v_rel" ].

vuole := 3sg-irreg-modal-verb-lex &
   [ STEM < "vuole" >,
     SYNSEM.LKEYS.KEYREL.PRED "_want_v_rel" ].

voi-verb-trans := 2sg-irreg-trans-verb-lex &
   [ STEM < "voi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_want_v_rel" ].

vuole-trans := 3sg-irreg-trans-verb-lex &
   [ STEM < "vuole" >,
     SYNSEM.LKEYS.KEYREL.PRED "_want_v_rel" ].

;;; Other

che := decl-comp-lex-item &
   [ STEM <"che"> ].

;se := int-comp-lex-item &
;   [ STEM <"se"> ].

;ad := prep-lex-item & 
;   [ STEM <"ad"> ].

;a := prep-lex-item & 
;   [ STEM <"a"> ].

;per := prep-lex-item & 
;   [ STEM <"per"> ].

;;; Determiners


un := non-dem-m-sg-det-lex &
   [ STEM < "un" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST type-id ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].

uno := non-dem-m-sg-det-lex &
   [ STEM < "uno" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST type-id ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].


una := non-dem-f-sg-det-lex &
   [ STEM < "una" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST type-id ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].


il := non-dem-m-sg-det-lex &
   [ STEM < "il" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].


lo := non-dem-m-sg-det-lex &
   [ STEM < "lo" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].

gli := non-dem-m-pl-det-lex &
   [ STEM < "gli" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act] > ,
	      LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].

i := non-dem-m-pl-det-lex &
   [ STEM < "i" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].

la := non-dem-f-sg-det-lex &
   [ STEM < "la" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].

le := non-dem-f-pl-det-lex &
   [ STEM < "le" >,
     SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act ] > ,
         LKEYS [ KEYREL.PRED "exist_q_rel" ] ] ].


questo := dem-m-sg-det-lex &
   [ STEM < "questo" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED proximal+dem_a_rel ].

codesto := dem-m-sg-det-lex &
   [ STEM < "codesto" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED hearer+dem_a_rel ].

quello := dem-m-sg-det-lex &
   [ STEM < "quello" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED distal+dem_a_rel ].

questa := dem-f-sg-det-lex &
   [ STEM < "questa" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED proximal+dem_a_rel ].

codesta := dem-f-sg-det-lex &
   [ STEM < "codesta" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED hearer+dem_a_rel ].

quella := dem-f-sg-det-lex &
   [ STEM < "quella" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED distal+dem_a_rel ].

queste := dem-f-pl-det-lex &
   [ STEM < "queste" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED proximal+dem_a_rel ].

codeste := dem-f-pl-det-lex &
   [ STEM < "codeste" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED hearer+dem_a_rel ].


quelle := dem-f-pl-det-lex &
   [ STEM < "quelle" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED distal+dem_a_rel ].

questi := dem-m-pl-det-lex &
   [ STEM < "questi" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED proximal+dem_a_rel ].


codesti := dem-m-pl-det-lex &
   [ STEM < "codesti" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED hearer+dem_a_rel ].


quelli := dem-m-pl-det-lex &
   [ STEM < "quelli" >,
     SYNSEM.LKEYS.ALTKEYREL.PRED distal+dem_a_rel ].

;;; Adjectives

bell := stem-adj-lex &
   [ STEM < "bell" >,
     SYNSEM.LKEYS.KEYREL.PRED "_pretty_a_rel" ].

buff := stem-adj-lex &
   [ STEM < "buff" >,
     SYNSEM.LKEYS.KEYREL.PRED "_funny_a_rel" ].

grande := infl-adj-lex &
   [ STEM < "grande" >,
     SYNSEM.LKEYS.KEYREL.PRED "_big_a_rel" ].

interessante := infl-adj-lex &
   [ STEM < "interessante" >,
     SYNSEM.LKEYS.KEYREL.PRED "_interesting_a_rel" ].

nuov := stem-adj-lex &
   [ STEM < "nuov" >,
     SYNSEM.LKEYS.KEYREL.PRED "_new_a_rel" ].

piccol := stem-adj-lex &
   [ STEM < "piccol" >,
     SYNSEM.LKEYS.KEYREL.PRED "_small_a_rel" ].

saggi := stem-adj-lex &
   [ STEM < "saggi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_wise_a_rel" ].

simpatic := stem-adj-lex &
   [ STEM < "simpatic" >,
     SYNSEM.LKEYS.KEYREL.PRED "_nice_a_rel" ].

studios := stem-adj-lex &
   [ STEM < "studios" >,
     SYNSEM.LKEYS.KEYREL.PRED "_studious_a_rel" ].

;;; Misc

sempre := adverb-lex &
   [ STEM < "sempre" >,
     SYNSEM.LKEYS.KEYREL.PRED "_always_r_rel" ].

oggi := adverb-lex &
   [ STEM < "oggi" >,
     SYNSEM.LKEYS.KEYREL.PRED "_today_r_rel" ].

;male := adverb-lex &
;   [ STEM < "male" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_badly_r_rel" ].

bene := adverb-lex &
   [ STEM < "bene" >,
     SYNSEM.LKEYS.KEYREL.PRED "_well_r_rel" ].

ieri := adverb-lex &
   [ STEM < "ieri" >,
     SYNSEM.LKEYS.KEYREL.PRED "_yesterday_r_rel" ].

velocemente := adverb-lex &
   [ STEM < "velocemente" >,
     SYNSEM.LKEYS.KEYREL.PRED "_quickly_r_rel" ].

lentamente := adverb-lex &
   [ STEM < "lentamente" >,
     SYNSEM.LKEYS.KEYREL.PRED "_slowly_r_rel" ].

non := neg-adv-lex &
   [ STEM < "non" >, 
     SYNSEM.LKEYS.KEYREL.PRED "_neg_r_rel" ].

e_1 := conj-lex &
  [ STEM < "e" >,
    SYNSEM.LKEYS.KEYREL.PRED "_and_coord_rel",
    CFORM "1" ].
