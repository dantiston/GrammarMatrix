matrix declarative clauses:

(1a) los gatos duermen (cats sleep)
(1b) duermo (sleep 1PSG -> I sleep)

The subject-verb order of matrix declarative clauses is the same as it
is for English. For the most part, the syntax for these type of
sentences corresponds with what I have already done in previous
labs. In order to get the right semantics, the head-subj-phrase rule
inherits from declarative-clause which provides the proposition_m_rel
relation that is necessary for matrix declarative clauses.

It was a little more work to get the semantics right for subject
pro-dropped sentences like in (1b). The basic-head-opt-subj-phrase
rule was originally defined in the Matrix to inherit from
head-compositional.  However, because the semantic constraints between
head compositional and declarative clause are not compatible, I could
not inherit from both supertypes.  Therefore, I had to redefine
basic-head-opt-subj-phrase to not inherit from head-compositional and
to get rid of the RELS and HCONS constraints. I was then able to
inherit from declarative clause to get the right semantics.

matrix interrogative clauses:

(2a) ¿los gatos duermen? (cats PL sleep 3PPL -> do cats sleep?)
(2b) ¿duermen los gatos? (sleep 3PPL cats PL -> do cats sleep?)

In spanish, the word order in matrix interrogative clauses is pretty
flexible. In (2a), the word order is the same as matrix declarative
clauses.  That is, there are two ways to distinguish this type of
interrogative question from its declarative counterpart: in spoken
language, by intonation; in written language, by the sentence initial
and final question marks.

Another way in which interrogatives can be formed in Spanish is by
subject-verb inversion in which the verb comes before the subject as
it is in (2b). In order to handle both cases, I had to define several
new types.  First, I defined the verb type to have a boolean feature
INV.  All verbs that inherit from verb-lex start out as [ INV - ].
The verb is only constrained to be [ INV + ] when it undergos the
inv-lex-rule, which was the next rule I defined.  With this lexical
rule, the subject is taken off the SUBJ list and prepended to the
COMPS list.  Also, I had to make sure that this rule did not apply to
sentences with subject pro-drop.  More specifically, I added [ OPT - ]
on the daughter's subj list so that the inv-lex-rule does not apply to
SUBJ-OPT-PHRASE.

Next, I defined two yes-no-q-phrase types: one that requires the INV
value of the head daughter's HEAD to be + (for inverted clauses, while
the other one constrains that value to be - (for non-inverted
clauses).  For the latter, I had to constrain the MARG value of the
question message to be the same as the LTOP value of the head daughter
so that the question relation could take proposition_m_rel has its
handle argument.

Because of the word-order flexibility in Spanish, (1a) and (2a) have
the same form but different semantics. When I parse a sentence of this
form, I (correctly) get two parses, one for each analysis.

Embedded declarative (with matrix declarative):

(3a) los gatos saben que los perros duermen (the cats know that the dogs sleep)
(3b) *los gatos saben que duermen los perros 
      (cats know that sleep dogs -> cats know that dogs sleep)

The complementizer que ("that") is obligatory in Spanish, whereas it
is optional in English. In order to handle this, I had to define
several new types.  The first type I defined was a head type named
comp.  Then I defined a complementizer-lex type which requires a
finite declarative clause as its complement.  Next, I defined a
subtype of that named that-comp-lex.  However, the that complementizer
does not add any message semantics.

In order to actually embed these clauses, the last thing I defined was
a type for verbs like know that select finite CPs as its complement. I
also constrained it so that the embedded clauses were not inverted as
in (3b)

Embedded interrogative (with matrix declarative):

(4a) los gatos saben si los perros duermen (cats know if dogs sleep)
(4b) *los gatos saben si duermen los perros 
     (the cats know if sleep the dogs -> cats know if dogs sleep)

To handle these type of clauses, I defined a whether-comp-lex that
inherits from complementizer-lex. Unlike the that complementizer, the
whether-comp-lex adds some message semantics.  This type adds the
question_m_rel relation to its semantic information.

All the clause types described above are getting the correct semantic
representations (as compared to the representations in the lab
write-up).



NB: Because I couldn't find a definitive source as to whether there is
subject-verb inversion after si ("if") as in (4b), I analyzed it as if
there wasn't any inversion.  I did this by constraining the HEAD of
complementizer-lex to be [ INV - ]. I also made sure that the
semantics were okay for sentences with various combinations of subject
pro-drop (i.e. in both matrix and embedded, only in matrix, only in
embedded clause, only in matrix clause or in neither).  The last five
sentences in test.items test this.
