; -*- Mode: TDL; Package: LKB -*-
; File for spelling preserving lexical rules, i.e., instances
; of (subtypes of) infl-ltol-rule and infl-ltow-rule.

; Every rule in this file should have a %suffix line.  Those
; that don't belong in lrules.tdl.

%(letter-set (!v oOeiuy!a))
%(letter-set (!a aA))
%(letter-set (!l lnr))
%(letter-set (!c bcdfghjklmnpqrstvwxz))
%(letter-set (!g kpt))

; new lexical rule instances added for XFST interface

; verb rules

1sg_verb :=
%suffix (* +1p+Sg)
1sg_verb-lex-rule.

2sg_verb :=
%suffix (* +2p+Sg)
2sg_verb-lex-rule.

3sg_verb :=
%suffix (* +3p+Sg)
3sg_verb-lex-rule.

1pl_verb :=
%suffix (* +1p+Pl)
1pl_verb-lex-rule.

2pl_verb :=
%suffix (* +2p+Pl)
2pl_verb-lex-rule.

3pl_verb :=
%suffix (* +3p+Pl)
3pl_verb-lex-rule.

;imp_verb :=
;%suffix (* +Stem)
;imp_verb-lex-rule.

neg_verb :=
%suffix (* +Neg)
neg_verb-lex-rule.

inf_verb :=
%suffix (* +Inf)
inf_verb-lex-rule.

ques-lex :=
%suffix (* +Ques)
ques-lex-rule.

; noun inflection

sg_noun :=
%suffix (* +Sg)
sg_noun-lex-rule.

pl_noun :=
%suffix (* +Pl)
pl_noun-lex-rule.

noun_case_nom :=
%suffix (* +Nom)
noun_case_nom-lex-rule.

noun_case_acc :=
%suffix (* +Acc)
noun_case_acc-lex-rule.

noun_case_part :=
%suffix (* +Part)
noun_case_part-lex-rule.

noun_case_elat :=
%suffix (* +Elat)
noun_case_elat-lex-rule.

noun_case_illat :=
%suffix (* +Illat)
noun_case_illat-lex-rule.

noun_case_iness :=
%suffix (* +Iness)
noun_case_iness-lex-rule.

noun_case_adess :=
%suffix (* +Adess)
noun_case_adess-lex-rule.

noun_case_ablat :=
%suffix (* +Ablat)
noun_case_ablat-lex-rule.

noun_case_allat :=
%suffix (* +Allat)
noun_case_allat-lex-rule.

; det inflection

sg_det :=
%suffix (* +Sg)
sg_det-lex-rule.

pl_det :=
%suffix (* +Pl)
pl_det-lex-rule.

det_case_nom :=
%suffix (* +Nom)
det_case_nom-lex-rule.

det_case_acc :=
%suffix (* +Acc)
det_case_acc-lex-rule.

det_case_part :=
%suffix (* +Part)
det_case_part-lex-rule.

det_case_elat :=
%suffix (* +Elat)
det_case_elat-lex-rule.

det_case_illat :=
%suffix (* +Illat)
det_case_illat-lex-rule.

det_case_iness :=
%suffix (* +Iness)
det_case_iness-lex-rule.

det_case_adess :=
%suffix (* +Adess)
det_case_adess-lex-rule.

det_case_ablat :=
%suffix (* +Ablat)
det_case_ablat-lex-rule.

det_case_allat :=
%suffix (* +Allat)
det_case_allat-lex-rule.

; adj inflection

sg_adj :=
%suffix (* +Sg)
sg_adj-lex-rule.

pl_adj :=
%suffix (* +Pl)
pl_adj-lex-rule.

adj_case_nom :=
%suffix (* +Nom)
adj_case_nom-lex-rule.

adj_case_acc :=
%suffix (* +Acc)
adj_case_acc-lex-rule.

adj_case_part :=
%suffix (* +Part)
adj_case_part-lex-rule.

adj_case_elat :=
%suffix (* +Elat)
adj_case_elat-lex-rule.

adj_case_illat :=
%suffix (* +Illat)
adj_case_illat-lex-rule.

adj_case_iness :=
%suffix (* +Iness)
adj_case_iness-lex-rule.

adj_case_adess :=
%suffix (* +Adess)
adj_case_adess-lex-rule.

adj_case_ablat :=
%suffix (* +Ablat)
adj_case_ablat-lex-rule.

adj_case_allat :=
%suffix (* +Allat)
adj_case_allat-lex-rule.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; OLD RULES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; currently matching type 3 and 4 verbs
; 1sg_verb :=
; %suffix (* n)
; 1sg_verb-lex-rule.

; 2sg_verb :=
; %suffix (* t) 
; 2sg_verb-lex-rule.

; 3sg_verb :=
; %suffix (syO syO) (d!a t!a!a) (ku kkuu) (le lee) (na taa) (tA ttAA) (no noo) (tu ttuu)
; 3sg_verb-lex-rule.

; 1pl_verb :=
; %suffix (* mme)
; 1pl_verb-lex-rule.

; 2pl_verb :=
; %suffix (* tte)
; 2pl_verb-lex-rule.

; 3pl_verb :=
; %suffix (o ovat) (O OvAt) (!a !av!at) (d!a t!av!at) (ku kkuvat) (na tavat) (tA ttAvAt)
; 3pl_verb-lex-rule.

; imp_verb :=
; %suffix (kAvelet kAvele) (syOt syO) (annat anna) (sanot sano) (pelkAAt pelkAA)
; imp_verb-lex-rule.

; this is what i really want:
;neg_verb :=
;%suffix (!vn !v) (!vt !v) (!vmme !v) (!vtte !v) (!vv!at !v) (sattuu satu)
;neg_verb-lex-rule.

; neg_verb :=
; %suffix (!vn !v)
; neg_verb-lex-rule.

; inf_verb :=
; %suffix (syO syOdA)
; inf_verb-lex-rule.

; noun lexical rules

; pl_noun :=
; %suffix (* t) (!v !vt) (!a !at)
; pl_noun-lex-rule.

; acc_noun :=
; %suffix (* t) (!g!g!v !g!vt)
; acc_noun-lex-rule.

; ; RGM 4-30-05 Created acc_adj rule

; acc_adj :=
; %suffix (* t)
; acc_adj-lex-rule.

; pl_adj :=
; %suffix (* t)
; pl_adj-lex-rule.

; elat_adj :=
; %suffix (* sta)
; elat_adj-lex-rule.

; This is a deplorable rule that needs to be changed, because
; it is only applying to words with endings that can undergo
; consonant gradation with two ending consonants like k/p/t
; and a final vowel. Surely more words will need to be changed
; to accusative. 
; elat_noun :=
; %suffix (!g!g!v !g!vsta)
; elat_noun-lex-rule.

; part_noun :=
; %suffix (* a) (n nta)
; part_noun-lex-rule.

; elat_det :=
; %suffix (!a !ast!a) (!v !vsta) (!a!c!a !ast!a)
; elat_det-lex-rule.

; allat_noun :=
; %suffix (* lle)
; allat_noun-lex-rule.

; ablat_noun :=
; %suffix (* lta)
; ablat_noun-lex-rule.

; acc_det :=
; %suffix (* t)
; acc_det-lex-rule.

; RGM 5-13-05 Following is instantiation of ques-lex-rule

; ques_lex :=
; %suffix (* ko)
; ques-lex-rule.

; ; RGM 5-20-05 created rule for turning nom pronouns into part pronouns
; ; also for nom into gen

; part_pronoun :=
; %suffix (minA minua) (sinA sinua) (hAn hAntA) (me meitA) (te teitA) (he heitA)
; part_pronoun-lex-rule.

; gen_pronoun :=
; %suffix (minA minun) (sinA sinun) (hAn hAnen) (me meidAn) (te teidAn) (he heidAn)
; gen_pronoun-lex-rule.

; ; end rules
