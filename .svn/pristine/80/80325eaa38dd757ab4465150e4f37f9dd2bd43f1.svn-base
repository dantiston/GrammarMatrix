---------------------------------------------------
Comments

 In some cases, either alla or illa can be used with the same verb.  I'm not
 sure exactly what the nuance is between the 2 verbs, but aanax implies 'is'
 while unatax is more like 'has'.

      avannx pani aanax / alla -> he is/isn't feverish
      avannx pani unatax / illa -> he has/doesn't have a fever

This seems like a contrast between aanax and unatax, not between
alla/illa directly.  It also doesn't illustrate that alla
and illa can really occur with the same verb.  Do you have other
examples of that?

 HOOK has a feature XARG which is the pointer to the oject being change
 to the negative form.  That corresponds to the daughter (dowstairs
 verb).

XARG is a pointer to the external argument (typically subject) of
the verb.  This rule copies up XARG because it preserves that
information (doesn't change it from input to output).

 HOOK.INDEX is the local sign, and becomes the first argument in the RELS
 predication.

 RELS includes the label of the relation, neg_r_rel, as well as a list of
 arguments to the relation.  ARG0 is the mother, and ARG1 is the handle of the
 higher scope element of the qeq list in HCONS.

In fact, this is a bug in the customization script.  The INDEX of the
mother of the rule should be the same as the INDEX of the daughter, and
not the ARG0 of the _neg_r_rel.

 I have created 2 instances of this inflecton, since the negation can take
 place with either appending illa or alla to a verb.
 Since I don't fully understand the difference between the 2 'be' verbs and
 their negative form, I don't have the means to limit their use in generation
 to only the appropriate case.  So these rules are mainly to get the correct
 parsing.  They won't be helpful in generation.

 neg1-infl-lr :=
 %suffix (* alla)
 neg-infl-lex-rule.

 neg2-infl-lr :=
 %suffix (* illa)
 neg-infl-lex-rule.

It seems that these are the rules for the non-be verbs (where the
be verbs are suppletive).  They will be helpful in generation as
well as parsing, they're just likely to overgenerate.

You didn't give me any glossed examples in your write up of the
negative inflection on any verb other than the copula that are
actually covered by your grammar ('study' isn't in your lexicon).
Furthermore, I see no such examples in your test suite.

 Malayalam has an interesting nuance where the object is denoted by
 case in the sentence.  The object's case however, is affected by its
 type.  If the object is HUMAN or ANIMAL (I think basically if it's
 something that's sentient) then its case is ACC.  Otherwise the
 object's case is NOM.  I'd like to revise my rules to account for
 this.

Well, first you need to get things generating, and to clean up
the sources of spurious ambiguity we diagnosed in class yesterday.
But then it would be fun to fix this (and it is one of those
sources of ambiguity, as well).

One solution is to have a feature ANIM which takes bool as its
value (+ or -) and then mark each noun for ANIM.  The transitive
verbs could have two entries apiece, one which wants and accusatve
ANIM - object and one which wants a nominative ANIM + object.

But, there might be a simpler way: You could actually leave the
nominative forms of the animate nouns underspecified for case
(nom+acc), so they could show up as the object of transitives
as well as as the subject.  (Do the animate nouns ever show up as
accusative?  If not, you might not want to even generate those forms.)
This would require three case rules

 acc, ANIM -
 nom, ANIM -
 nom+acc, ANIM +

The second analysis will work just fine, unless there are any
verbs which require accusative case even on animate nouns, at
which point you'll need to fall back to the first analysis.

Another twist would be if this is really about split ergativity.
In particular, what happens when you have an inanimate subject
and an animate object?  (E.g., "The falling block hit me.")
If both arguments are nominative, then no problem.  If the inanimate
subject gets some other case (e.g., dative or instrumental or...)
then we're looking at split ergativity, and we need to do something
slightly more elaborate.

    I.  subj-DAT + verb-aam
    II. subj-NOM + verb-aam

If you get all of the above working, and still want to do more,
I suggest trying to get the dative marking on the subject of
verbs marked with -aam.  That will involve making your -aam rule
a val-change-only-lex-rule, copying up all the VAL information that
doesn't change, and then making the case on the subject nom+dat.
