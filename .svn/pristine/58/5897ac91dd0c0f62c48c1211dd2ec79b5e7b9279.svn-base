To used [incr tsdb()] for batch generation:

0. Load the grammar.

1. Create an instance of the GMMT test suite for the language you're
working on.  Call it <lg>_gmmt_gold_unthinned, where <lg> is the code
for the language.

2. Make sure that Process > Switches > Write `result' relation is on.

3. Process > All items
 
4. Treebank:  Trees > Annotate.  For each sentence, make selections
on the right hand side of the pane until only one parse is left.
Then save the result.

5. Make sure that Trees > Switches > Thinning Normalize is on.  (We
might eventually want to turn this off, but do it this way for now.)

6. Normalize: Trees > Normalize.  This creates a new profile, with
just the best tree per parse.  Call this profile <lg>_gmmt_mrs_input.

7. Set the source database to <lg>_gmmt_mrs_input.  (Compare > Source
database > <lg>_gmmt_mrs_input).

8. Create a new instance of the GMMT test suite.  Call this one
<lg>_gmmt_gen_output.

9. Tell [incr tsdb()] we're generating now:  Process > Switches > Generation.

10. Process > All items.  This will take each item in <lg>_gmmt_gen_output,
find its corresponding item in <lg>_gmmt_mrs_input, take that mrs, generate
from it, and store the results. You can browse the results with Browse
> Results.  Sometimes, the index-for-generator command in the script
seems to get ignored.  If you get no results, try doing Generate > Index
in the LKB Top menu, and processing again.

11. Remember that you've set Process > Switches > Generation the next
time you try to parse something through the fine system and it doesn't
work.

12. If you want to see why you're getting so many generated strings
for an input, you can get to the "compare" tool by doing Trees >
Annotate on the <lg>_gmmt_gen_output profile.
