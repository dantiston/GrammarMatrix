=============================================
Sentential Negation in Malayalam
=============================================
Malayalam has 2 'being' verbs:
    aanax and alla.
Each of these has a negative form.
    aanax -> unatax
    alla -> illa

Sentences which use these verbs, replace them with the negative form to create
sentential negation.

    raaman dooktaar aanax
    Raman  doctor   be-PRES
    Raman is a doctor

    raaman dooktaar alla
    Raman  doctor   be-PRES-NEG
    Raman is not a doctor

    kutatai viatail   unatax
    child   house-LOC be-PRES
    the child is at home

    kutatai viatail   illa
    child   house-LOC be-PRES-NEG
    the child is not at home

Sentences with verbs other than these 2, append illa or alla to the end of the
verb to create a negative sentence.

    avan patahiccu -> he studied
    avan patahicilla -> he didn't study

In some cases, either alla or illa can be used with the same verb.  I'm not
sure exactly what the nuance is between the 2 verbs, but aanax implies 'is'
while unatax is more like 'has'.

      avannx pani aanax / alla -> he is/isn't feverish
      avannx pani unatax / illa -> he has/doesn't have a fever


=============================================
Implementation of Sentential Negation
(Description of how it works)
=============================================

The lexical rule from the creation script works for my sentential negation.

neg-infl-lex-rule := cont-change-only-lex-rule & inflecting-lex-rule &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS <! event-relation &
                     [ PRED "_neg_r_rel",
                       LBL #ltop,
                       ARG0 #ind,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !> ],
    SYNSEM.LKEYS #lkeys,
    DTR lex-item &
        [ SYNSEM [ LKEYS #lkeys,
                   LOCAL [ CONT.HOOK [ XARG #xarg,
                                       LTOP #larg ],
                           CAT.HEAD verb ] ] ] ] .

HOOK has a feature XARG which is the pointer to the oject being change to the
negative form.  That corresponds to the daughter (dowstairs verb).

HOOK.LTOP is the handle of the result of the lexical rule and becomes the
handle which labels the RELS predication.

HOOK.INDEX is the local sign, and becomes the first argument in the RELS
predication.

RELS includes the label of the relation, neg_r_rel, as well as a list of
arguments to the relation.  ARG0 is the mother, and ARG1 is the handle of the
higher scope element of the qeq list in HCONS.

The higher scope element in HCONS is related to the lower scope element, which
is the handle of the daughter in the rule.

So the input is a verb, and this is then related to the output which is an
inflected verb, but semantically relates the verb to its negative form.  A
semantic negative is added to the original verb's semantic meaning.

I have created 2 instances of this inflecton, since the negation can take
place with either appending illa or alla to a verb.
Since I don't fully understand the difference between the 2 'be' verbs and
their negative form, I don't have the means to limit their use in generation
to only the appropriate case.  So these rules are mainly to get the correct
parsing.  They won't be helpful in generation.

neg1-infl-lr :=
%suffix (* alla)
neg-infl-lex-rule.

neg2-infl-lr :=
%suffix (* illa)
neg-infl-lex-rule.


=============================================
Current Coverage: 
Does it get the right strings and only the right strings.
Does it get the right meaning.
Are there any problems, and what could be done?
=============================================
This rule, and the inflections are parsing the sentences, and getting the
meaning.  After looking at the MRS, I think this is what's happening.

The MRS is showing some elements out of both CONT and HOOK?  
The LTOP handle is the handle of the sentence.
The first node is the negation (ARG0) of the sentence (ARG1) which has handle
15 (in the MRS diagram I have)
Handle 15 is related to handle 13 though a qeq relationship, where h13 is the
verb which heads the sentence.  h13 then has 3 ARGS: 
    ARG0: an inflection
    ARG1: the head daughter (x4-> h6 -> qeq -> h3: it)
    ARG2: complement (x9 -> h11 -> qeq -> h8: me)

This seems very straightforawrd, with no problems.
The generation does not work.
I get a result that no strings were generated, and that the edge limit was
exhausted.

=============================================
Describe 'can' in Malayalam
=============================================
Malayalam includes a modal auxiliary which is in the form of the suxxif -aam.
Nair's book "Auxiliary Verbs in Malayalam" says that this is a contracted form
of the future tense form of the copula verb 'to be'.  The suffic -aam can be
attached to the verb in 2 different syntactic structures:

    I.  subj-DAT + verb-aam
    II. subj-NOM + verb-aam

In form I, the suffix acts as an auxiliary verb and denotes permission,
capability, possibility, inclination or suggestion.
In form II, it acts as a main verb and can mean probibility, certainty, or
willingness.

There are also 4 verbs which can denote capability by themselves:
    kaliyum
    parrum
    okkum
    saadhikkum

Thus a sentence can be structured as 
    ninnalakkx codyannala codikkaam
    you-DAT    questions  ask-can
or
    ninnalakkx codyannala codikkan kaliyum
    you-DAT    questions  ask      can

For my test cases, I have used the suffix since it seems to be more common.

=============================================
Describe the implementation
=============================================
I used the suggested lexical rule from the homework for the auxiliary suffix.
It contains many of the same contraints as the negation rule above.
The verb is identified as the top handle.  As input, it takes an uninflected
verb, since the suffix is added to the infinitive form of the verb.

HOOK's XARG feature is a pointer to the object being controlled.
       LTOP identifies this element as the top handle, and the INDEX is
       identified with ARG0 of the relationship.
RELS has the 2 arguments to the relation: ARG0 which is the output of the
       rule, and ARG1, which is the upstairs element of the qeq relation.
HCONS identifies the qeq relation, and the LARG with the daughter of the rule.

; Auxiliary Verb
infl-add-ccont-ltow-rule := inflecting-lex-rule &
                            same-non-local-lex-rule &
                            same-cat-lex-rule &
                            same-ctxt-lex-rule &
                            same-agr-lex-rule &
  [ INFLECTED +,
    C-CONT [ HOOK  [ XARG #xarg,
                     LTOP #ltop,
                     INDEX #ind ],
             RELS <! arg1-ev-relation &
                     [ PRED "_can_v_rel" ,
                       LBL #ltop,
                       ARG0 #ind,
                       ARG1 #harg ] !>,
             HCONS <! qeq & 
                      [ HARG #harg,
                        LARG #larg ] !> ],
    DTR [ SYNSEM.LOCAL [CONT.HOOK [XARG #xarg,
                                   LTOP #larg ],
                        CAT.HEAD verb ],
          INFLECTED - ] ].


The inflection adds -aam to words that end in a consonant, or if the word ends
in a, the final a is dropped before the suffix -aam is added.

aux-infl-verb :=
%suffix (* aam) (!xa !xaam)
infl-add-ccont-ltow-rule.


=============================================
Current Coverage: 
Does it get the right strings and only the right strings.
Does it get the right meaning.
Are there any problems, and what could be done?
=============================================
This rule, is parsing the sentences, and getting the
meaning. 

Can's ARG1 is qeq to the handle of eat as expected.  Eat in turn has 2
relations: x4 being the index of the personal pronoun, and x9 the index of glass.

This seems very straightforawrd, with no problems.

The generation does not work.
I get a result that no strings were generated, and that the edge limit was
exhausted.

=============================================
What else would I like to fix?
=============================================
Malayalam has an interesting nuance where the object is denoted by case in the
sentence.  The object's case however, is affected by its type.  If the object
is HUMAN or ANIMAL (I think basically if it's something that's sentient) then
its case is ACC.  Otherwise the object's case is NOM.
I'd like to revise my rules to account for this.
